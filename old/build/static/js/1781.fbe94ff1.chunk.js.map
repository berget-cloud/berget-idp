{"version":3,"file":"static/js/1781.fbe94ff1.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/WebauthnAuthenticate.tsx"],"sourcesContent":["import { useEffect, Fragment } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useInsertScriptTags } from \"keycloakify/tools/useInsertScriptTags\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function WebauthnAuthenticate(props: PageProps<Extract<KcContext, { pageId: \"webauthn-authenticate.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({ doUseDefaultCss, classes });\n\n    const {\n        url,\n        isUserIdentified,\n        challenge,\n        userVerification,\n        rpId,\n        createTimeout,\n        messagesPerField,\n        realm,\n        registrationDisabled,\n        authenticators,\n        shouldDisplayAuthenticators\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg } = i18n;\n\n    const { insertScriptTags } = useInsertScriptTags({\n        componentOrHookName: \"WebauthnAuthenticate\",\n        scriptTags: [\n            {\n                type: \"text/javascript\",\n                src: `${url.resourcesCommonPath}/node_modules/jquery/dist/jquery.min.js`\n            },\n            {\n                type: \"text/javascript\",\n                src: `${url.resourcesPath}/js/base64url.js`\n            },\n            {\n                type: \"text/javascript\",\n                textContent: `\n\n                    function webAuthnAuthenticate() {\n                        let isUserIdentified = ${isUserIdentified};\n                        if (!isUserIdentified) {\n                            doAuthenticate([]);\n                            return;\n                        }\n                        checkAllowCredentials();\n                    }\n\n                    function checkAllowCredentials() {\n                        let allowCredentials = [];\n                        let authn_use = document.forms['authn_select'].authn_use_chk;\n                    \n                        if (authn_use !== undefined) {\n                            if (authn_use.length === undefined) {\n                                allowCredentials.push({\n                                    id: base64url.decode(authn_use.value, {loose: true}),\n                                    type: 'public-key',\n                                });\n                            } else {\n                                for (let i = 0; i < authn_use.length; i++) {\n                                    allowCredentials.push({\n                                        id: base64url.decode(authn_use[i].value, {loose: true}),\n                                        type: 'public-key',\n                                    });\n                                }\n                            }\n                        }\n                        doAuthenticate(allowCredentials);\n                    }\n\n\n                    function doAuthenticate(allowCredentials) {\n                    \n                        // Check if WebAuthn is supported by this browser\n                        if (!window.PublicKeyCredential) {\n                            $(\"#error\").val(\"${msgStr(\"webauthn-unsupported-browser-text\")}\");\n                            $(\"#webauth\").submit();\n                            return;\n                        }\n                    \n                        let challenge = \"${challenge}\";\n                        let userVerification = \"${userVerification}\";\n                        let rpId = \"${rpId}\";\n                        let publicKey = {\n                            rpId : rpId,\n                            challenge: base64url.decode(challenge, { loose: true })\n                        };\n                    \n                        let createTimeout = ${createTimeout};\n                        if (createTimeout !== 0) publicKey.timeout = createTimeout * 1000;\n                    \n                        if (allowCredentials.length) {\n                            publicKey.allowCredentials = allowCredentials;\n                        }\n                    \n                        if (userVerification !== 'not specified') publicKey.userVerification = userVerification;\n                    \n                        navigator.credentials.get({publicKey})\n                            .then((result) => {\n                                window.result = result;\n                            \n                                let clientDataJSON = result.response.clientDataJSON;\n                                let authenticatorData = result.response.authenticatorData;\n                                let signature = result.response.signature;\n                            \n                                $(\"#clientDataJSON\").val(base64url.encode(new Uint8Array(clientDataJSON), { pad: false }));\n                                $(\"#authenticatorData\").val(base64url.encode(new Uint8Array(authenticatorData), { pad: false }));\n                                $(\"#signature\").val(base64url.encode(new Uint8Array(signature), { pad: false }));\n                                $(\"#credentialId\").val(result.id);\n                                if(result.response.userHandle) {\n                                    $(\"#userHandle\").val(base64url.encode(new Uint8Array(result.response.userHandle), { pad: false }));\n                                }\n                                $(\"#webauth\").submit();\n                            })\n                            .catch((err) => {\n                                $(\"#error\").val(err);\n                                $(\"#webauth\").submit();\n                            })\n                        ;\n                    }\n\n                `\n            }\n        ]\n    });\n\n    useEffect(() => {\n        insertScriptTags();\n    }, []);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"username\")}\n            displayInfo={realm.password && realm.registrationAllowed && !registrationDisabled}\n            infoNode={\n                <div id=\"kc-registration\">\n                    <span>\n                        {msg(\"noAccount\")}{\" \"}\n                        <a tabIndex={6} href={url.registrationUrl}>\n                            {msg(\"doRegister\")}\n                        </a>\n                    </span>\n                </div>\n            }\n            headerNode={msg(\"webauthn-login-title\")}\n        >\n            <div id=\"kc-form-webauthn\" className={kcClsx(\"kcFormClass\")}>\n                <form id=\"webauth\" action={url.loginAction} method=\"post\">\n                    <input type=\"hidden\" id=\"clientDataJSON\" name=\"clientDataJSON\" />\n                    <input type=\"hidden\" id=\"authenticatorData\" name=\"authenticatorData\" />\n                    <input type=\"hidden\" id=\"signature\" name=\"signature\" />\n                    <input type=\"hidden\" id=\"credentialId\" name=\"credentialId\" />\n                    <input type=\"hidden\" id=\"userHandle\" name=\"userHandle\" />\n                    <input type=\"hidden\" id=\"error\" name=\"error\" />\n                </form>\n                <div className={clsx(kcClsx(\"kcFormGroupClass\"), \"no-bottom-margin\")}>\n                    {authenticators && (\n                        <>\n                            <form id=\"authn_select\" className={kcClsx(\"kcFormClass\")}>\n                                {authenticators.authenticators.map(authenticator => (\n                                    <input type=\"hidden\" name=\"authn_use_chk\" value={authenticator.credentialId} />\n                                ))}\n                            </form>\n\n                            {shouldDisplayAuthenticators && (\n                                <>\n                                    {authenticators.authenticators.length > 1 && (\n                                        <p className={kcClsx(\"kcSelectAuthListItemTitle\")}>{msg(\"webauthn-available-authenticators\")}</p>\n                                    )}\n                                    <div className={kcClsx(\"kcFormOptionsClass\")}>\n                                        {authenticators.authenticators.map((authenticator, i) => (\n                                            <div key={i} id=\"kc-webauthn-authenticator\" className={kcClsx(\"kcSelectAuthListItemClass\")}>\n                                                <div className={kcClsx(\"kcSelectAuthListItemIconClass\")}>\n                                                    <i\n                                                        className={clsx(\n                                                            (() => {\n                                                                const className = kcClsx(authenticator.transports.iconClass as any);\n                                                                if (className === authenticator.transports.iconClass) {\n                                                                    return kcClsx(\"kcWebAuthnDefaultIcon\");\n                                                                }\n                                                                return className;\n                                                            })(),\n                                                            kcClsx(\"kcSelectAuthListItemIconPropertyClass\")\n                                                        )}\n                                                    />\n                                                </div>\n                                                <div className={kcClsx(\"kcSelectAuthListItemArrowIconClass\")}>\n                                                    <div id=\"kc-webauthn-authenticator-label\" className={kcClsx(\"kcSelectAuthListItemHeadingClass\")}>\n                                                        {advancedMsg(authenticator.label)}\n                                                    </div>\n                                                    {authenticator.transports.displayNameProperties?.length && (\n                                                        <div\n                                                            id=\"kc-webauthn-authenticator-transport\"\n                                                            className={kcClsx(\"kcSelectAuthListItemDescriptionClass\")}\n                                                        >\n                                                            {authenticator.transports.displayNameProperties\n                                                                .map((displayNameProperty, i, arr) => ({\n                                                                    displayNameProperty,\n                                                                    hasNext: i !== arr.length - 1\n                                                                }))\n                                                                .map(({ displayNameProperty, hasNext }) => (\n                                                                    <Fragment key={displayNameProperty}>\n                                                                        {advancedMsg(displayNameProperty)}\n                                                                        {hasNext && <span>, </span>}\n                                                                    </Fragment>\n                                                                ))}\n                                                        </div>\n                                                    )}\n                                                    <div className={kcClsx(\"kcSelectAuthListItemDescriptionClass\")}>\n                                                        <span id=\"kc-webauthn-authenticator-created-label\">{msg(\"webauthn-createdAt-label\")}</span>\n                                                        <span id=\"kc-webauthn-authenticator-created\">{authenticator.createdAt}</span>\n                                                    </div>\n                                                    <div className={kcClsx(\"kcSelectAuthListItemFillClass\")} />\n                                                </div>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </>\n                            )}\n                        </>\n                    )}\n\n                    <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormButtonsClass\")}>\n                        <input\n                            id=\"authenticateWebAuthnButton\"\n                            type=\"button\"\n                            onClick={() => {\n                                assert(\"webAuthnAuthenticate\" in window);\n                                assert(typeof window.webAuthnAuthenticate === \"function\");\n                                window.webAuthnAuthenticate();\n                            }}\n                            autoFocus\n                            value={msgStr(\"webauthn-doAuthenticate\")}\n                            className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                        />\n                    </div>\n                </div>\n            </div>\n        </Template>\n    );\n}\n"],"names":["WebauthnAuthenticate","props","kcContext","i18n","doUseDefaultCss","Template","classes","kcClsx","getKcClsx","url","isUserIdentified","challenge","userVerification","rpId","createTimeout","messagesPerField","realm","registrationDisabled","authenticators","shouldDisplayAuthenticators","msg","msgStr","advancedMsg","insertScriptTags","useInsertScriptTags","componentOrHookName","scriptTags","type","src","resourcesCommonPath","resourcesPath","textContent","useEffect","_jsx","Object","assign","displayMessage","existsError","displayInfo","password","registrationAllowed","infoNode","id","children","_jsxs","tabIndex","href","registrationUrl","headerNode","className","action","loginAction","method","name","clsx","_Fragment","map","authenticator","value","credentialId","length","i","transports","iconClass","label","_a","displayNameProperties","displayNameProperty","arr","hasNext","_ref","Fragment","createdAt","onClick","assert","window","webAuthnAuthenticate","autoFocus"],"sourceRoot":""}