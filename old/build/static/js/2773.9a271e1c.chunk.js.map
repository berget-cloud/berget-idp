{"version":3,"file":"static/js/2773.9a271e1c.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/LoginUsername.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function LoginUsername(props: PageProps<Extract<KcContext, { pageId: \"login-username.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameHidden, login, registrationDisabled, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"username\")}\n            displayInfo={realm.password && realm.registrationAllowed && !registrationDisabled}\n            infoNode={\n                <div id=\"kc-registration\">\n                    <span>\n                        {msg(\"noAccount\")}\n                        <a tabIndex={6} href={url.registrationUrl}>\n                            {msg(\"doRegister\")}\n                        </a>\n                    </span>\n                </div>\n            }\n            headerNode={msg(\"doLogIn\")}\n            socialProvidersNode={\n                <>\n                    {realm.password && social.providers !== undefined && social.providers.length !== 0 && (\n                        <div id=\"kc-social-providers\" className={kcClsx(\"kcFormSocialAccountSectionClass\")}>\n                            <hr />\n                            <h2>{msg(\"identity-provider-login-label\")}</h2>\n                            <ul className={kcClsx(\"kcFormSocialAccountListClass\", social.providers.length > 3 && \"kcFormSocialAccountListGridClass\")}>\n                                {social.providers.map((...[p, , providers]) => (\n                                    <li key={p.alias}>\n                                        <a\n                                            id={`social-${p.alias}`}\n                                            className={kcClsx(\n                                                \"kcFormSocialAccountListButtonClass\",\n                                                providers.length > 3 && \"kcFormSocialAccountGridItem\"\n                                            )}\n                                            type=\"button\"\n                                            href={p.loginUrl}\n                                        >\n                                            {p.iconClasses && <i className={clsx(kcClsx(\"kcCommonLogoIdP\"), p.iconClasses)} aria-hidden=\"true\"></i>}\n                                            <span className={clsx(kcClsx(\"kcFormSocialAccountNameClass\"), p.iconClasses && \"kc-social-icon-text\")}>\n                                                {p.displayName}\n                                            </span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </>\n            }\n        >\n            <div id=\"kc-form\">\n                <div id=\"kc-form-wrapper\">\n                    {realm.password && (\n                        <form\n                            id=\"kc-form-login\"\n                            onSubmit={() => {\n                                setIsLoginButtonDisabled(true);\n                                return true;\n                            }}\n                            action={url.loginAction}\n                            method=\"post\"\n                        >\n                            {!usernameHidden && (\n                                <div className={kcClsx(\"kcFormGroupClass\")}>\n                                    <label htmlFor=\"username\" className={kcClsx(\"kcLabelClass\")}>\n                                        {!realm.loginWithEmailAllowed\n                                            ? msg(\"username\")\n                                            : !realm.registrationEmailAsUsername\n                                              ? msg(\"usernameOrEmail\")\n                                              : msg(\"email\")}\n                                    </label>\n                                    <input\n                                        tabIndex={2}\n                                        id=\"username\"\n                                        className={kcClsx(\"kcInputClass\")}\n                                        name=\"username\"\n                                        defaultValue={login.username ?? \"\"}\n                                        type=\"text\"\n                                        autoFocus\n                                        autoComplete=\"off\"\n                                        aria-invalid={messagesPerField.existsError(\"username\")}\n                                    />\n                                    {messagesPerField.existsError(\"username\") && (\n                                        <span id=\"input-error\" className={kcClsx(\"kcInputErrorMessageClass\")} aria-live=\"polite\">\n                                            {messagesPerField.getFirstError(\"username\")}\n                                        </span>\n                                    )}\n                                </div>\n                            )}\n\n                            <div className={kcClsx(\"kcFormGroupClass\", \"kcFormSettingClass\")}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={3}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    defaultChecked={!!login.rememberMe}\n                                                />{\" \"}\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n\n                            <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormGroupClass\")}>\n                                <input\n                                    tabIndex={4}\n                                    disabled={isLoginButtonDisabled}\n                                    className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </Template>\n    );\n}\n"],"names":["LoginUsername","props","kcContext","i18n","doUseDefaultCss","Template","classes","kcClsx","getKcClsx","social","realm","url","usernameHidden","login","registrationDisabled","messagesPerField","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","_jsx","Object","assign","displayMessage","existsError","displayInfo","password","registrationAllowed","infoNode","id","children","_jsxs","tabIndex","href","registrationUrl","headerNode","socialProvidersNode","_Fragment","undefined","providers","length","className","map","_len","arguments","_ref","Array","_key","p","alias","type","loginUrl","iconClasses","clsx","displayName","onSubmit","action","loginAction","method","htmlFor","loginWithEmailAllowed","registrationEmailAsUsername","name","defaultValue","_a","username","autoFocus","autoComplete","getFirstError","rememberMe","defaultChecked","disabled","value"],"sourceRoot":""}