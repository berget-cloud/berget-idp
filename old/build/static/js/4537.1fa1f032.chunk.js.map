{"version":3,"file":"static/js/4537.1fa1f032.chunk.js","mappings":"+MAQc,SAAUA,EAAiBC,GACrC,MAAM,UAAEC,EAAS,KAAEC,EAAI,gBAAEC,EAAe,SAAEC,EAAQ,QAAEC,GAAYL,GAE1D,OAAEM,IAAWC,EAAAA,EAAAA,GAAU,CAAEJ,kBAAiBE,aAE1C,IACFG,EAAG,UACHC,EAAS,OACTC,EAAM,SACNC,EAAQ,oBACRC,EAAmB,aACnBC,EAAY,KACZC,EAAI,gCACJC,EAA+B,wBAC/BC,EAAuB,mBACvBC,EAAkB,4BAClBC,EAA2B,cAC3BC,EAAa,qBACbC,EAAoB,WACpBC,EAAU,qBACVC,GACArB,GAEE,IAAEsB,EAAG,OAAEC,GAAWtB,GAElB,iBAAEuB,IAAqBC,EAAAA,EAAAA,GAAoB,CAC7CC,oBAAqB,mBACrBC,WAAY,CACR,CACIC,KAAM,kBACNC,IAAK,GAAGtB,EAAIuB,8DAEhB,CACIF,KAAM,kBACNC,IAAK,GAAGtB,EAAIwB,iCAEhB,CACIH,KAAM,kBACNI,YAAa,iOAKcT,EAAO,8OAMXf,0CACHC,4CACEC,2DAESuB,KAAKC,UAAUvB,4IAGpBC,wmBAeRC,sHAG2BC,wUAMRC,iUAMLC,0dASSC,ybAQfC,qJAGQC,skIA2F9C,OAJAgB,EAAAA,EAAAA,YAAU,KACNX,GAAkB,GACnB,KAGCY,EAAAA,EAAAA,MAACjC,EAAQkC,OAAAC,OAAA,CACLtC,UAAWA,EACXC,KAAMA,EACNC,gBAAiBA,EACjBE,QAASA,EACTmC,YACIH,EAAAA,EAAAA,MAAAI,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,QAAMC,UAAWtC,EAAO,uBACvBiB,EAAI,mCACN,CAAAmB,SAAA,EAGPC,EAAAA,EAAAA,KAAA,OAAAL,OAAAC,OAAA,CAAMM,GAAG,WAAWD,UAAWtC,EAAO,eAAgBwC,OAAQtC,EAAIuC,YAAaC,OAAO,QAAM,CAAAN,UACxFL,EAAAA,EAAAA,MAAA,MAAAC,OAAAC,OAAA,CAAKK,UAAWtC,EAAO,qBAAmB,CAAAoC,SAAA,EACtCC,EAAAA,EAAAA,KAAA,SAAOd,KAAK,SAASgB,GAAG,iBAAiBI,KAAK,oBAC9CN,EAAAA,EAAAA,KAAA,SAAOd,KAAK,SAASgB,GAAG,oBAAoBI,KAAK,uBACjDN,EAAAA,EAAAA,KAAA,SAAOd,KAAK,SAASgB,GAAG,wBAAwBI,KAAK,2BACrDN,EAAAA,EAAAA,KAAA,SAAOd,KAAK,SAASgB,GAAG,qBAAqBI,KAAK,wBAClDN,EAAAA,EAAAA,KAAA,SAAOd,KAAK,SAASgB,GAAG,aAAaI,KAAK,gBAC1CN,EAAAA,EAAAA,KAAA,SAAOd,KAAK,SAASgB,GAAG,QAAQI,KAAK,WACrCN,EAAAA,EAAAA,KAACO,EAAmB,CAAC5C,OAAQA,EAAQJ,KAAMA,YAGnDyC,EAAAA,EAAAA,KAAA,SACId,KAAK,SACLe,UAAWtC,EAAO,gBAAiB,uBAAwB,qBAAsB,sBACjFuC,GAAG,mBACHM,MAAO3B,EAAO,yBACd4B,QAASA,MACLC,EAAAA,EAAAA,GAAO,wBAAyBC,SAChCD,EAAAA,EAAAA,GAA6C,oBAA/BC,OAAOC,qBACrBD,OAAOC,qBAAqB,KAIlClC,GAAcC,IACZqB,EAAAA,EAAAA,KAAA,OAAAL,OAAAC,OAAA,CAAMO,OAAQtC,EAAIuC,YAAaH,UAAWtC,EAAO,eAAgBuC,GAAG,4BAA4BG,OAAO,QAAM,CAAAN,UACzGC,EAAAA,EAAAA,KAAA,SAAAL,OAAAC,OAAA,CACIV,KAAK,SACLe,UAAWtC,EAAO,gBAAiB,uBAAwB,qBAAsB,sBACjFuC,GAAG,oBACHI,KAAK,aACLE,MAAM,QAAM,CAAAT,SAEXnB,EAAI,qBAM7B,CAEA,SAAS2B,EAAoBlD,GACzB,MAAM,OAAEM,EAAM,KAAEJ,GAASF,GAEnB,IAAEuB,GAAQrB,EAEhB,OACIyC,EAAAA,EAAAA,KAAA,MAAAL,OAAAC,OAAA,CAAKM,GAAG,kBAAkBD,UAAWtC,EAAO,uBAAqB,CAAAoC,UAC7DC,EAAAA,EAAAA,KAAA,MAAAL,OAAAC,OAAA,CAAKK,UAAWtC,EAAO,8BAA4B,CAAAoC,UAC/CC,EAAAA,EAAAA,KAAA,MAAAL,OAAAC,OAAA,CAAKK,UAAU,YAAU,CAAAF,UACrBL,EAAAA,EAAAA,MAAA,SAAAK,SAAA,EACIC,EAAAA,EAAAA,KAAA,SAAOd,KAAK,WAAWgB,GAAG,kBAAkBI,KAAK,kBAAkBE,MAAM,KAAKK,gBAAgB,IAC7FjC,EAAI,kCAM7B,C","sources":["../node_modules/keycloakify/src/login/pages/WebauthnRegister.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport { useInsertScriptTags } from \"keycloakify/tools/useInsertScriptTags\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function WebauthnRegister(props: PageProps<Extract<KcContext, { pageId: \"webauthn-register.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({ doUseDefaultCss, classes });\n\n    const {\n        url,\n        challenge,\n        userid,\n        username,\n        signatureAlgorithms,\n        rpEntityName,\n        rpId,\n        attestationConveyancePreference,\n        authenticatorAttachment,\n        requireResidentKey,\n        userVerificationRequirement,\n        createTimeout,\n        excludeCredentialIds,\n        isSetRetry,\n        isAppInitiatedAction\n    } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { insertScriptTags } = useInsertScriptTags({\n        componentOrHookName: \"WebauthnRegister\",\n        scriptTags: [\n            {\n                type: \"text/javascript\",\n                src: `${url.resourcesCommonPath}/node_modules/jquery/dist/jquery.min.js`\n            },\n            {\n                type: \"text/javascript\",\n                src: `${url.resourcesPath}/js/base64url.js`\n            },\n            {\n                type: \"text/javascript\",\n                textContent: `\n                function registerSecurityKey() {\n\n                    // Check if WebAuthn is supported by this browser\n                    if (!window.PublicKeyCredential) {\n                        $(\"#error\").val(\"${msgStr(\"webauthn-unsupported-browser-text\")}\");\n                        $(\"#register\").submit();\n                        return;\n                    }\n    \n                    // mandatory parameters\n                    let challenge = \"${challenge}\";\n                    let userid = \"${userid}\";\n                    let username = \"${username}\";\n    \n                    let signatureAlgorithms =${JSON.stringify(signatureAlgorithms)};\n                    let pubKeyCredParams = getPubKeyCredParams(signatureAlgorithms);\n    \n                    let rpEntityName = \"${rpEntityName}\";\n                    let rp = {name: rpEntityName};\n    \n                    let publicKey = {\n                        challenge: base64url.decode(challenge, {loose: true}),\n                        rp: rp,\n                        user: {\n                            id: base64url.decode(userid, {loose: true}),\n                            name: username,\n                            displayName: username\n                        },\n                        pubKeyCredParams: pubKeyCredParams,\n                    };\n    \n                    // optional parameters\n                    let rpId = \"${rpId}\";\n                    publicKey.rp.id = rpId;\n    \n                    let attestationConveyancePreference = \"${attestationConveyancePreference}\";\n                    if (attestationConveyancePreference !== 'not specified') publicKey.attestation = attestationConveyancePreference;\n    \n                    let authenticatorSelection = {};\n                    let isAuthenticatorSelectionSpecified = false;\n    \n                    let authenticatorAttachment = \"${authenticatorAttachment}\";\n                    if (authenticatorAttachment !== 'not specified') {\n                        authenticatorSelection.authenticatorAttachment = authenticatorAttachment;\n                        isAuthenticatorSelectionSpecified = true;\n                    }\n    \n                    let requireResidentKey = \"${requireResidentKey}\";\n                    if (requireResidentKey !== 'not specified') {\n                        if (requireResidentKey === 'Yes')\n                            authenticatorSelection.requireResidentKey = true;\n                        else\n                            authenticatorSelection.requireResidentKey = false;\n                        isAuthenticatorSelectionSpecified = true;\n                    }\n    \n                    let userVerificationRequirement = \"${userVerificationRequirement}\";\n                    if (userVerificationRequirement !== 'not specified') {\n                        authenticatorSelection.userVerification = userVerificationRequirement;\n                        isAuthenticatorSelectionSpecified = true;\n                    }\n    \n                    if (isAuthenticatorSelectionSpecified) publicKey.authenticatorSelection = authenticatorSelection;\n    \n                    let createTimeout = ${createTimeout};\n                    if (createTimeout !== 0) publicKey.timeout = createTimeout * 1000;\n    \n                    let excludeCredentialIds = \"${excludeCredentialIds}\";\n                    let excludeCredentials = getExcludeCredentials(excludeCredentialIds);\n                    if (excludeCredentials.length > 0) publicKey.excludeCredentials = excludeCredentials;\n    \n                    navigator.credentials.create({publicKey})\n                        .then(function (result) {\n                            window.result = result;\n                            let clientDataJSON = result.response.clientDataJSON;\n                            let attestationObject = result.response.attestationObject;\n                            let publicKeyCredentialId = result.rawId;\n    \n                            $(\"#clientDataJSON\").val(base64url.encode(new Uint8Array(clientDataJSON), {pad: false}));\n                            $(\"#attestationObject\").val(base64url.encode(new Uint8Array(attestationObject), {pad: false}));\n                            $(\"#publicKeyCredentialId\").val(base64url.encode(new Uint8Array(publicKeyCredentialId), {pad: false}));\n    \n                            if (typeof result.response.getTransports === \"function\") {\n                                let transports = result.response.getTransports();\n                                if (transports) {\n                                    $(\"#transports\").val(getTransportsAsString(transports));\n                                }\n                            } else {\n                                console.log(\"Your browser is not able to recognize supported transport media for the authenticator.\");\n                            }\n    \n                            let initLabel = \"WebAuthn Authenticator (Default Label)\";\n                            let labelResult = window.prompt(\"Please input your registered authenticator's label\", initLabel);\n                            if (labelResult === null) labelResult = initLabel;\n                            $(\"#authenticatorLabel\").val(labelResult);\n    \n                            $(\"#register\").submit();\n    \n                        })\n                        .catch(function (err) {\n                            $(\"#error\").val(err);\n                            $(\"#register\").submit();\n    \n                        });\n                }\n    \n                function getPubKeyCredParams(signatureAlgorithmsList) {\n                    let pubKeyCredParams = [];\n                    if (signatureAlgorithmsList.length === 0) {\n                        pubKeyCredParams.push({type: \"public-key\", alg: -7});\n                        return pubKeyCredParams;\n                    }\n    \n                    for (let i = 0; i < signatureAlgorithmsList.length; i++) {\n                        pubKeyCredParams.push({\n                            type: \"public-key\",\n                            alg: signatureAlgorithmsList[i]\n                        });\n                    }\n                    return pubKeyCredParams;\n                }\n    \n                function getExcludeCredentials(excludeCredentialIds) {\n                    let excludeCredentials = [];\n                    if (excludeCredentialIds === \"\") return excludeCredentials;\n    \n                    let excludeCredentialIdsList = excludeCredentialIds.split(',');\n    \n                    for (let i = 0; i < excludeCredentialIdsList.length; i++) {\n                        excludeCredentials.push({\n                            type: \"public-key\",\n                            id: base64url.decode(excludeCredentialIdsList[i],\n                            {loose: true})\n                        });\n                    }\n                    return excludeCredentials;\n                }\n    \n                function getTransportsAsString(transportsList) {\n                    if (transportsList === '' || Array.isArray(transportsList)) return \"\";\n    \n                    let transportsString = \"\";\n    \n                    for (let i = 0; i < transportsList.length; i++) {\n                        transportsString += transportsList[i] + \",\";\n                    }\n    \n                    return transportsString.slice(0, -1);\n                }\n                `\n            }\n        ]\n    });\n\n    useEffect(() => {\n        insertScriptTags();\n    }, []);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={\n                <>\n                    <span className={kcClsx(\"kcWebAuthnKeyIcon\")} />\n                    {msg(\"webauthn-registration-title\")}\n                </>\n            }\n        >\n            <form id=\"register\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <input type=\"hidden\" id=\"clientDataJSON\" name=\"clientDataJSON\" />\n                    <input type=\"hidden\" id=\"attestationObject\" name=\"attestationObject\" />\n                    <input type=\"hidden\" id=\"publicKeyCredentialId\" name=\"publicKeyCredentialId\" />\n                    <input type=\"hidden\" id=\"authenticatorLabel\" name=\"authenticatorLabel\" />\n                    <input type=\"hidden\" id=\"transports\" name=\"transports\" />\n                    <input type=\"hidden\" id=\"error\" name=\"error\" />\n                    <LogoutOtherSessions kcClsx={kcClsx} i18n={i18n} />\n                </div>\n            </form>\n            <input\n                type=\"submit\"\n                className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                id=\"registerWebAuthn\"\n                value={msgStr(\"doRegisterSecurityKey\")}\n                onClick={() => {\n                    assert(\"registerSecurityKey\" in window);\n                    assert(typeof window.registerSecurityKey === \"function\");\n                    window.registerSecurityKey();\n                }}\n            />\n\n            {!isSetRetry && isAppInitiatedAction && (\n                <form action={url.loginAction} className={kcClsx(\"kcFormClass\")} id=\"kc-webauthn-settings-form\" method=\"post\">\n                    <button\n                        type=\"submit\"\n                        className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                        id=\"cancelWebAuthnAIA\"\n                        name=\"cancel-aia\"\n                        value=\"true\"\n                    >\n                        {msg(\"doCancel\")}\n                    </button>\n                </form>\n            )}\n        </Template>\n    );\n}\n\nfunction LogoutOtherSessions(props: { kcClsx: KcClsx; i18n: I18n }) {\n    const { kcClsx, i18n } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                <div className=\"checkbox\">\n                    <label>\n                        <input type=\"checkbox\" id=\"logout-sessions\" name=\"logout-sessions\" value=\"on\" defaultChecked={true} />\n                        {msg(\"logoutOtherSessions\")}\n                    </label>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":["WebauthnRegister","props","kcContext","i18n","doUseDefaultCss","Template","classes","kcClsx","getKcClsx","url","challenge","userid","username","signatureAlgorithms","rpEntityName","rpId","attestationConveyancePreference","authenticatorAttachment","requireResidentKey","userVerificationRequirement","createTimeout","excludeCredentialIds","isSetRetry","isAppInitiatedAction","msg","msgStr","insertScriptTags","useInsertScriptTags","componentOrHookName","scriptTags","type","src","resourcesCommonPath","resourcesPath","textContent","JSON","stringify","useEffect","_jsxs","Object","assign","headerNode","_Fragment","children","_jsx","className","id","action","loginAction","method","name","LogoutOtherSessions","value","onClick","assert","window","registerSecurityKey","defaultChecked"],"sourceRoot":""}