{"version":3,"file":"static/js/5041.206f481f.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/LoginUpdatePassword.tsx"],"sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function LoginUpdatePassword(props: PageProps<Extract<KcContext, { pageId: \"login-update-password.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { msg, msgStr } = i18n;\n\n    const { url, messagesPerField, isAppInitiatedAction } = kcContext;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"password\", \"password-confirm\")}\n            headerNode={msg(\"updatePasswordTitle\")}\n        >\n            <form id=\"kc-passwd-update-form\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"password-new\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"passwordNew\")}\n                        </label>\n                    </div>\n                    <div className={kcClsx(\"kcInputWrapperClass\")}>\n                        <PasswordWrapper kcClsx={kcClsx} i18n={i18n} passwordInputId=\"password-new\">\n                            <input\n                                type=\"password\"\n                                id=\"password-new\"\n                                name=\"password-new\"\n                                className={kcClsx(\"kcInputClass\")}\n                                autoFocus\n                                autoComplete=\"new-password\"\n                                aria-invalid={messagesPerField.existsError(\"password\", \"password-confirm\")}\n                            />\n                        </PasswordWrapper>\n\n                        {messagesPerField.existsError(\"password\") && (\n                            <span\n                                id=\"input-error-password\"\n                                className={kcClsx(\"kcInputErrorMessageClass\")}\n                                aria-live=\"polite\"\n                                dangerouslySetInnerHTML={{\n                                    __html: messagesPerField.get(\"password\")\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"password-confirm\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"passwordConfirm\")}\n                        </label>\n                    </div>\n                    <div className={kcClsx(\"kcInputWrapperClass\")}>\n                        <PasswordWrapper kcClsx={kcClsx} i18n={i18n} passwordInputId=\"password-confirm\">\n                            <input\n                                type=\"password\"\n                                id=\"password-confirm\"\n                                name=\"password-confirm\"\n                                className={kcClsx(\"kcInputClass\")}\n                                autoFocus\n                                autoComplete=\"new-password\"\n                                aria-invalid={messagesPerField.existsError(\"password\", \"password-confirm\")}\n                            />\n                        </PasswordWrapper>\n\n                        {messagesPerField.existsError(\"password-confirm\") && (\n                            <span\n                                id=\"input-error-password-confirm\"\n                                className={kcClsx(\"kcInputErrorMessageClass\")}\n                                aria-live=\"polite\"\n                                dangerouslySetInnerHTML={{\n                                    __html: messagesPerField.get(\"password-confirm\")\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <LogoutOtherSessions kcClsx={kcClsx} i18n={i18n} />\n                    <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormButtonsClass\")}>\n                        <input\n                            className={kcClsx(\n                                \"kcButtonClass\",\n                                \"kcButtonPrimaryClass\",\n                                !isAppInitiatedAction && \"kcButtonBlockClass\",\n                                \"kcButtonLargeClass\"\n                            )}\n                            type=\"submit\"\n                            value={msgStr(\"doSubmit\")}\n                        />\n                        {isAppInitiatedAction && (\n                            <button\n                                className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonLargeClass\")}\n                                type=\"submit\"\n                                name=\"cancel-aia\"\n                                value=\"true\"\n                            >\n                                {msg(\"doCancel\")}\n                            </button>\n                        )}\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n\nfunction LogoutOtherSessions(props: { kcClsx: KcClsx; i18n: I18n }) {\n    const { kcClsx, i18n } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                <div className=\"checkbox\">\n                    <label>\n                        <input type=\"checkbox\" id=\"logout-sessions\" name=\"logout-sessions\" value=\"on\" defaultChecked={true} />\n                        {msg(\"logoutOtherSessions\")}\n                    </label>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction PasswordWrapper(props: { kcClsx: KcClsx; i18n: I18n; passwordInputId: string; children: JSX.Element }) {\n    const { kcClsx, i18n, passwordInputId, children } = props;\n\n    const { msgStr } = i18n;\n\n    const [isPasswordRevealed, toggleIsPasswordRevealed] = useReducer((isPasswordRevealed: boolean) => !isPasswordRevealed, false);\n\n    useEffect(() => {\n        const passwordInputElement = document.getElementById(passwordInputId);\n\n        assert(passwordInputElement instanceof HTMLInputElement);\n\n        passwordInputElement.type = isPasswordRevealed ? \"text\" : \"password\";\n    }, [isPasswordRevealed]);\n\n    return (\n        <div className={kcClsx(\"kcInputGroup\")}>\n            {children}\n            <button\n                type=\"button\"\n                className={kcClsx(\"kcFormPasswordVisibilityButtonClass\")}\n                aria-label={msgStr(isPasswordRevealed ? \"hidePassword\" : \"showPassword\")}\n                aria-controls={passwordInputId}\n                onClick={toggleIsPasswordRevealed}\n            >\n                <i className={kcClsx(isPasswordRevealed ? \"kcFormPasswordVisibilityIconHide\" : \"kcFormPasswordVisibilityIconShow\")} aria-hidden />\n            </button>\n        </div>\n    );\n}\n"],"names":["LoginUpdatePassword","props","kcContext","i18n","doUseDefaultCss","Template","classes","kcClsx","getKcClsx","msg","msgStr","url","messagesPerField","isAppInitiatedAction","_jsx","Object","assign","displayMessage","existsError","headerNode","children","_jsxs","id","className","action","loginAction","method","htmlFor","PasswordWrapper","passwordInputId","type","name","autoFocus","autoComplete","dangerouslySetInnerHTML","__html","get","LogoutOtherSessions","value","defaultChecked","isPasswordRevealed","toggleIsPasswordRevealed","useReducer","useEffect","passwordInputElement","document","getElementById","assert","HTMLInputElement","onClick"],"sourceRoot":""}