{"version":3,"file":"static/js/545.5cdacba4.chunk.js","mappings":"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","sources":["components/ui/PasswordWrapper.tsx","components/ui/button.tsx","components/ui/input.tsx","lib/utils.ts","login/i18n.ts","components/ui/dropdown-menu.tsx","components/ui/mode-toggle.tsx","components/ui/card.tsx","login/Template.tsx","login/pages/Info.tsx","components/ui/label.tsx","components/ui/checkbox.tsx","components/ui/separator.tsx","components/ui/SocialProviders.tsx","login/pages/Login.tsx","login/pages/Register.tsx","components/ui/scroll-area.tsx","login/pages/Terms.tsx","login/pages/Error.tsx","login/pages/Code.tsx","login/pages/DeleteAccountConfirm.tsx","login/pages/DeleteCredential.tsx","login/pages/FrontchannelLogout.tsx","login/pages/IdpReviewUserProfile.tsx","components/ui/TextDisplay.tsx","login/pages/LoginConfigTotp.tsx","login/pages/LoginIdpLinkConfirm.tsx","login/pages/LoginIdpLinkEmail.tsx","login/pages/LoginOauthGrant.tsx","login/pages/LoginOtp.tsx","login/pages/LoginPageExpired.tsx","login/pages/LoginPassword.tsx","login/pages/LoginResetOtp.tsx","login/pages/LoginResetPassword.tsx","login/pages/LoginUpdatePassword.tsx","login/pages/LoginUpdateProfile.tsx","login/pages/LoginUsername.tsx","login/pages/LoginVerifyEmail.tsx","login/pages/LoginX509Info.tsx","login/pages/LogoutConfirm.tsx","login/pages/SamlPostForm.tsx","login/pages/SelectAuthenticator.tsx","login/pages/UpdateEmail.tsx","login/pages/WebauthnAuthenticate.tsx","login/pages/WebauthnError.tsx","login/pages/WebauthnRegister.tsx","login/pages/LoginOauth2DeviceVerifyUserCode.tsx","login/pages/LoginRecoveryAuthnCodeConfig.tsx","login/pages/LoginRecoveryAuthnCodeInput.tsx","login/KcPage.tsx"],"sourcesContent":["import { I18n } from \"keycloakify/login/i18n\";\nimport { KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { useEffect, useReducer } from \"react\";\nimport { Button } from \"./button\";\nimport { EyeIcon, EyeSlashIcon } from \"@heroicons/react/20/solid\";\nexport function PasswordWrapper(props: {\n    kcClsx: KcClsx;\n    i18n: I18n;\n    passwordInputId: string;\n    children: JSX.Element;\n}) {\n    const { kcClsx, i18n, passwordInputId, children } = props;\n\n    const { msgStr } = i18n;\n\n    const [isPasswordRevealed, toggleIsPasswordRevealed] = useReducer(\n        (isPasswordRevealed: boolean) => !isPasswordRevealed,\n        false\n    );\n\n    useEffect(() => {\n        const passwordInputElement = document.getElementById(passwordInputId);\n\n        assert(passwordInputElement instanceof HTMLInputElement);\n\n        passwordInputElement.type = isPasswordRevealed ? \"text\" : \"password\";\n    }, [isPasswordRevealed]);\n\n    return (\n        <div className=\"flex space-x-2\">\n            {children}\n            <Button\n                type=\"button\"\n                aria-label={msgStr(isPasswordRevealed ? \"hidePassword\" : \"showPassword\")}\n                aria-controls={passwordInputId}\n                variant=\"outline\"\n                onClick={toggleIsPasswordRevealed}\n            >\n                <div>\n                    {isPasswordRevealed ? (\n                        <EyeSlashIcon className=\"h-4 w-4 \" aria-hidden=\"true\" />\n                    ) : (\n                        <EyeIcon className=\"h-4 w-4 \" aria-hidden=\"true\" />\n                    )}\n                </div>\n            </Button>\n        </div>\n    );\n}\n","import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:scale-105\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-primary text-primary-foreground hover:bg-primary/50 hover:dark:bg-primary/30 hover:dark:text-secondary-foreground \",\n                destructive:\n                    \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n                outline:\n                    \"border border-input border-foreground bg-background text-foreground hover:bg-accent hover:text-accent-foreground\",\n                secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary bg-background underline-offset-4 hover:underline\"\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\"\n            }\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\"\n        }\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","import * as React from \"react\";\n\nimport { cn } from \"../../lib/utils\";\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n    ({ className, type, ...props }, ref) => {\n        return (\n            <input\n                type={type}\n                className={cn(\n                    \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-xs ring-offset-background file:border-0 file:bg-transparent file:text-xs file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}","import { createUseI18n } from \"keycloakify/login\";\n\nexport const { useI18n, ofTypeI18n } = createUseI18n({});\n\nexport type I18n = typeof ofTypeI18n;\n","\"use client\";\n\nimport * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n    React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n        inset?: boolean;\n    }\n>(({ className, inset, children, ...props }, ref) => (\n    <DropdownMenuPrimitive.SubTrigger\n        ref={ref}\n        className={cn(\n            \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n            inset && \"pl-8\",\n            className\n        )}\n        {...props}\n    >\n        {children}\n        <ChevronRight className=\"ml-auto h-4 w-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n    React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n    <DropdownMenuPrimitive.SubContent\n        ref={ref}\n        className={cn(\n            \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n            className\n        )}\n        {...props}\n    />\n));\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n    React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n    <DropdownMenuPrimitive.Portal>\n        <DropdownMenuPrimitive.Content\n            ref={ref}\n            sideOffset={sideOffset}\n            className={cn(\n                \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n                className\n            )}\n            {...props}\n        />\n    </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n    React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n        inset?: boolean;\n    }\n>(({ className, inset, ...props }, ref) => (\n    <DropdownMenuPrimitive.Item\n        ref={ref}\n        className={cn(\n            \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-xs outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n            inset && \"pl-8\",\n            className\n        )}\n        {...props}\n    />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n    React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n    <DropdownMenuPrimitive.CheckboxItem\n        ref={ref}\n        className={cn(\n            \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n            className\n        )}\n        checked={checked}\n        {...props}\n    >\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n            <DropdownMenuPrimitive.ItemIndicator>\n                <Check className=\"h-4 w-4\" />\n            </DropdownMenuPrimitive.ItemIndicator>\n        </span>\n        {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n    React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n    <DropdownMenuPrimitive.RadioItem\n        ref={ref}\n        className={cn(\n            \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n            className\n        )}\n        {...props}\n    >\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n            <DropdownMenuPrimitive.ItemIndicator>\n                <Circle className=\"h-2 w-2 fill-current\" />\n            </DropdownMenuPrimitive.ItemIndicator>\n        </span>\n        {children}\n    </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n    React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n        inset?: boolean;\n    }\n>(({ className, inset, ...props }, ref) => (\n    <DropdownMenuPrimitive.Label\n        ref={ref}\n        className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n        {...props}\n    />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n    React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n    <DropdownMenuPrimitive.Separator\n        ref={ref}\n        className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n        {...props}\n    />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({\n    className,\n    ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n    return (\n        <span\n            className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n            {...props}\n        />\n    );\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\n\nexport {\n    DropdownMenu,\n    DropdownMenuTrigger,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuCheckboxItem,\n    DropdownMenuRadioItem,\n    DropdownMenuLabel,\n    DropdownMenuSeparator,\n    DropdownMenuShortcut,\n    DropdownMenuGroup,\n    DropdownMenuPortal,\n    DropdownMenuSub,\n    DropdownMenuSubContent,\n    DropdownMenuSubTrigger,\n    DropdownMenuRadioGroup\n};\n","import { Moon, Sun } from \"lucide-react\";\n\nimport { Button } from \"./button\";\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"./dropdown-menu\";\nimport { useState } from \"react\";\n\nexport function ModeToggle() {\n    const [isDarkMode, setIsDarkMode] = useState(false);\n\n    const setTheme = (mode: string) => {\n        switch (mode) {\n            case \"light\":\n                setIsDarkMode(false);\n                document.documentElement.classList.remove(\"dark\");\n                break;\n            case \"dark\":\n                setIsDarkMode(true);\n                document.documentElement.classList.add(\"dark\");\n                break;\n            case \"system\":\n                setIsDarkMode(window.matchMedia(\"(prefers-color-scheme: dark)\").matches);\n                document.documentElement.classList.toggle(\n                    \"dark\",\n                    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n                );\n                break;\n            default:\n                break;\n        }\n    };\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"secondary\" size=\"icon\">\n                    <Sun className=\" w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n                    <Moon className=\"absolute  w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n                    <span className=\"sr-only\">Toggle theme</span>\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n                    Light\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setTheme(\"dark\")}>Dark</DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n                    System\n                </DropdownMenuItem>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    );\n}\n","import * as React from \"react\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ className, ...props }, ref) => (\n        <div\n            ref={ref}\n            className={cn(\n                \"rounded-lg border-slate-800 bg-background bg-card text-card-foreground shadow-sm transition-all duration-300 ease-in-out hover:shadow-lg hover:scale-[1.02]\",\n                className\n            )}\n            {...props}\n        />\n    )\n);\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ className, ...props }, ref) => (\n        <div\n            ref={ref}\n            className={cn(\"flex flex-col space-y-1.5 p-10\", className)}\n            {...props}\n        />\n    )\n);\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h3\n        ref={ref}\n        className={cn(\n            \"text-2xl font-semibold leading-none tracking-tight text-left\",\n            className\n        )}\n        {...props}\n    />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ className, ...props }, ref) => (\n        <div\n            ref={ref}\n            className={cn(\"flex items-center p-6 pt-0\", className)}\n            {...props}\n        />\n    )\n);\nCardFooter.displayName = \"CardFooter\";\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n","import { useEffect } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { TemplateProps } from \"keycloakify/login/TemplateProps\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport { useInsertScriptTags } from \"keycloakify/tools/useInsertScriptTags\";\nimport { useInsertLinkTags } from \"keycloakify/tools/useInsertLinkTags\";\nimport { useSetClassName } from \"keycloakify/tools/useSetClassName\";\nimport type { I18n } from \"./i18n\";\nimport type { KcContext } from \"./KcContext\";\nimport { Button } from \"../components/ui/button\";\nimport { ModeToggle } from \"../components/ui/mode-toggle\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"../components/ui/card\";\nimport \"../styles/global.css\";\nimport { GlobeAltIcon } from \"@heroicons/react/24/outline\";\nimport {\n    DropdownMenu,\n    DropdownMenuTrigger,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuCheckboxItem,\n    DropdownMenuRadioGroup,\n    DropdownMenuRadioItem,\n    DropdownMenuLabel,\n    DropdownMenuSeparator,\n    DropdownMenuSub,\n    DropdownMenuSubTrigger,\n    DropdownMenuSubContent\n} from \"../components/ui/dropdown-menu\";\n\nexport function Template(props: TemplateProps<KcContext, I18n>) {\n    const {\n        displayInfo = false,\n        displayMessage = true,\n        displayRequiredFields = false,\n        headerNode,\n        socialProvidersNode = null,\n        infoNode = null,\n        documentTitle,\n        bodyClassName,\n        kcContext,\n        i18n,\n        doUseDefaultCss,\n        classes,\n        children\n    } = props;\n\n    const { kcClsx } = getKcClsx({ doUseDefaultCss, classes });\n\n    const { msg, msgStr, getChangeLocaleUrl, labelBySupportedLanguageTag, currentLanguageTag } = i18n;\n\n    const { realm, locale, auth, url, message, isAppInitiatedAction, authenticationSession, scripts } = kcContext;\n\n    useEffect(() => {\n        document.title = documentTitle ?? msgStr(\"loginTitle\", kcContext.realm.displayName);\n    }, []);\n\n    useSetClassName({\n        qualifiedName: \"html\",\n        className: kcClsx(\"kcHtmlClass\")\n    });\n\n    useSetClassName({\n        qualifiedName: \"body\",\n        className: bodyClassName ?? kcClsx(\"kcBodyClass\")\n    });\n\n    useEffect(() => {\n        const { currentLanguageTag } = locale ?? {};\n\n        if (currentLanguageTag === undefined) {\n            return;\n        }\n\n        const html = document.querySelector(\"html\");\n        assert(html !== null);\n        html.lang = currentLanguageTag;\n    }, []);\n\n    const { areAllStyleSheetsLoaded } = useInsertLinkTags({\n        componentOrHookName: \"Template\",\n        hrefs: !doUseDefaultCss\n            ? []\n            : [\n                  `${url.resourcesCommonPath}/node_modules/@patternfly/patternfly/patternfly.min.css`,\n                  `${url.resourcesCommonPath}/node_modules/patternfly/dist/css/patternfly.min.css`,\n                  `${url.resourcesCommonPath}/node_modules/patternfly/dist/css/patternfly-additions.min.css`,\n                  `${url.resourcesCommonPath}/lib/pficon/pficon.css`,\n                  `${url.resourcesPath}/css/login.css`\n              ]\n    });\n\n    const { insertScriptTags } = useInsertScriptTags({\n        componentOrHookName: \"Template\",\n        scriptTags: [\n            {\n                type: \"module\",\n                src: `${url.resourcesPath}/js/menu-button-links.js`\n            },\n            ...(authenticationSession === undefined\n                ? []\n                : [\n                      {\n                          type: \"module\",\n                          textContent: [\n                              `import { checkCookiesAndSetTimer } from \"${url.resourcesPath}/js/authChecker.js\";`,\n                              ``,\n                              `checkCookiesAndSetTimer(`,\n                              `  \"${authenticationSession.authSessionId}\",`,\n                              `  \"${authenticationSession.tabId}\",`,\n                              `  \"${url.ssoLoginInOtherTabsUrl}\"`,\n                              `);`\n                          ].join(\"\\n\")\n                      } as const\n                  ]),\n            ...scripts.map(\n                script =>\n                    ({\n                        type: \"text/javascript\",\n                        src: script\n                    }) as const\n            )\n        ]\n    });\n\n    useEffect(() => {\n        if (areAllStyleSheetsLoaded) {\n            insertScriptTags();\n        }\n    }, [areAllStyleSheetsLoaded]);\n\n    if (!areAllStyleSheetsLoaded) {\n        return null;\n    }\n    const languageSelector = () => {\n        return (\n            <div>\n                {realm.internationalizationEnabled && (assert(locale !== undefined), locale.supported.length > 1) && (\n                    <div className=\"mt-0.5 -mr-3  justify-end\">\n                        <div id=\"kc-locale-wrapper\" className=\"flex  justify-end\">\n                            <DropdownMenu>\n                                <DropdownMenuTrigger asChild>\n                                    <Button\n                                        tabIndex={1}\n                                        variant=\"secondary\"\n                                        size=\"sm\"\n                                        aria-label={msgStr(\"languages\")}\n                                        aria-haspopup=\"true\"\n                                        aria-expanded=\"false\"\n                                        aria-controls=\"language-switch1\"\n                                        className=\"px-3 py-0\"\n                                    >\n                                        <div className=\"flex space-x-2\">\n                                            <GlobeAltIcon className=\"h-5 w-5\" />\n                                            <span>{labelBySupportedLanguageTag[currentLanguageTag]}</span>\n                                        </div>\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent id=\"language-switch1\" role=\"menu\">\n                                    {locale.supported.map(({ languageTag }, i) => (\n                                        <DropdownMenuItem key={languageTag} role=\"none\">\n                                            <a role=\"menuitem\" id={`language-${i + 1}`} href={getChangeLocaleUrl(languageTag)}>\n                                                {labelBySupportedLanguageTag[languageTag]}\n                                            </a>\n                                        </DropdownMenuItem>\n                                    ))}\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    };\n    return (\n        <div className=\"bg-background  min-h-screen   flex flex-col items-center justify-center  prose dark:prose-invert max-w-none\">\n            <div id=\"kc-header-wrapper\" className=\"text-center text-foreground hide md:visible\">\n                {msgStr(\"loginTitleHtml\", realm.displayNameHtml)}\n            </div>\n            <Card className=\"py-0 px-3  md:-[40rem] shadow-2xl w-full min-h-screen  md:w-[30rem] sm:min-h-fit \">\n                <CardContent className=\"space-y-8 pb-5 \">\n                    <div className=\"flex justify-end space-x-4 pt-2\">\n                        {languageSelector()}\n                        <ModeToggle />\n                    </div>\n                    <header className=\"text-center  \">\n                        {(() => {\n                            const node = !(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n                                <h1 id=\"kc-page-title\">{headerNode}</h1>\n                            ) : (\n                                <div id=\"kc-username\" className={kcClsx(\"kcFormGroupClass\")}>\n                                    <label id=\"kc-attempted-username\">{auth.attemptedUsername}</label>\n                                    <a id=\"reset-login\" href={url.loginRestartFlowUrl} aria-label={msgStr(\"restartLoginTooltip\")}>\n                                        <div className=\"kc-login-tooltip\">\n                                            <i className={kcClsx(\"kcResetFlowIcon\")}></i>\n                                            <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                                        </div>\n                                    </a>\n                                </div>\n                            );\n\n                            if (displayRequiredFields) {\n                                return (\n                                    <div className=\"text-sm\">\n                                        <div className={clsx(kcClsx(\"kcLabelWrapperClass\"), \"subtitle\")}>\n                                            <span className=\"subtitle\">\n                                                <span className=\"required\">*</span>\n                                                {msg(\"requiredFields\")}\n                                            </span>\n                                        </div>\n                                        <div className=\"col-md-10\">{node}</div>\n                                    </div>\n                                );\n                            }\n\n                            return node;\n                        })()}\n                    </header>\n                    <div id=\"kc-content\" className=\"\">\n                        <div id=\"kc-content-wrapper\">\n                            {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n                            {displayMessage && message !== undefined && (message.type !== \"warning\" || !isAppInitiatedAction) && (\n                                <div\n                                    className={clsx(\n                                        `alert-${message.type}`,\n                                        kcClsx(\"kcAlertClass\"),\n                                        `pf-m-${message?.type === \"error\" ? \"danger\" : message.type}`\n                                    )}\n                                >\n                                    <div className=\"pf-c-alert__icon\">\n                                        {message.type === \"success\" && <span className={kcClsx(\"kcFeedbackSuccessIcon\")}></span>}\n                                        {message.type === \"warning\" && <span className={kcClsx(\"kcFeedbackWarningIcon\")}></span>}\n                                        {message.type === \"error\" && <span className={kcClsx(\"kcFeedbackErrorIcon\")}></span>}\n                                        {message.type === \"info\" && <span className={kcClsx(\"kcFeedbackInfoIcon\")}></span>}\n                                    </div>\n                                    <span\n                                        className=\"text-sm\"\n                                        dangerouslySetInnerHTML={{\n                                            __html: message.summary\n                                        }}\n                                    />\n                                </div>\n                            )}\n                            {children}\n                            {auth !== undefined && auth.showTryAnotherWayLink && (\n                                <form id=\"kc-select-try-another-way-form\" action={url.loginAction} method=\"post\">\n                                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                                        <input type=\"hidden\" name=\"tryAnotherWay\" value=\"on\" />\n                                        <a\n                                            href=\"#\"\n                                            id=\"try-another-way\"\n                                            onClick={() => {\n                                                document.forms[\"kc-select-try-another-way-form\" as never].submit();\n                                                return false;\n                                            }}\n                                        >\n                                            {msg(\"doTryAnotherWay\")}\n                                        </a>\n                                    </div>\n                                </form>\n                            )}\n                            {socialProvidersNode}\n                        </div>\n                    </div>\n                    {displayInfo && (\n                        <div className=\" w-full\">\n                            <div className=\" text-foreground\">{infoNode}</div>\n                        </div>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n","import type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nexport default function Info(props: PageProps<Extract<KcContext, { pageId: \"info.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { advancedMsgStr, msg } = i18n;\n\n    const { messageHeader, message, requiredActions, skipLink, pageRedirectUri, actionUri, client } = kcContext;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={false}\n            headerNode={\n                <span\n                    dangerouslySetInnerHTML={{\n                        __html: messageHeader ?? message.summary\n                    }}\n                />\n            }\n        >\n            <div id=\"kc-info-message\" className=\"\">\n                <p\n                    className=\"instruction\"\n                    dangerouslySetInnerHTML={{\n                        __html: (() => {\n                            let html = message.summary;\n\n                            if (requiredActions) {\n                                html += \"<b>\";\n\n                                html += requiredActions.map(requiredAction => advancedMsgStr(`requiredAction.${requiredAction}`)).join(\", \");\n\n                                html += \"</b>\";\n                            }\n\n                            return html;\n                        })()\n                    }}\n                />\n                {(() => {\n                    if (skipLink) {\n                        return null;\n                    }\n\n                    if (pageRedirectUri) {\n                        return (\n                            <p>\n                                <a href={pageRedirectUri} className={`${buttonVariants({ variant: \"link\" })} pl-0`}>\n                                    {msg(\"backToApplication\")}\n                                </a>\n                            </p>\n                        );\n                    }\n                    if (actionUri) {\n                        return (\n                            <p>\n                                <a href={actionUri} className={`${buttonVariants({ variant: \"link\" })} pl-0`}>\n                                    {msg(\"proceedWithAction\")}\n                                </a>\n                            </p>\n                        );\n                    }\n\n                    if (client.baseUrl) {\n                        return (\n                            <p>\n                                <a href={client.baseUrl} className={`${buttonVariants({ variant: \"link\" })} pl-0`}>\n                                    {msg(\"backToApplication\")}\n                                </a>\n                            </p>\n                        );\n                    }\n                })()}\n            </div>\n        </Template>\n    );\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst labelVariants = cva(\n    \"text-xs font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 \"\n);\n\nconst Label = React.forwardRef<\n    React.ElementRef<typeof LabelPrimitive.Root>,\n    React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n        VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n    <LabelPrimitive.Root\n        ref={ref}\n        className={cn(\n            \"text-foreground bg-background text-sm\",\n            labelVariants(),\n            className\n        )}\n        {...props}\n    />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n","import * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { Check } from \"lucide-react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"../../lib/utils\";\n\n// Define variants for the checkbox styling\n// Simplified without variants\nconst checkboxVariants = cva(\n    // \"  peer h-4 w-4 shrink-0 rounded-sm border border-primary bg-background text-foreground checked:bg-primary checked:text-primary-foreground checked:border-transparent checked:after:content-['✓'] checked:after:flex checked:after:items-center checked:after:justify-center checked:after:h-full checked:after:text-xs checked:after:leading-none checked:after:text-center ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n    // \" peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\n    // \" peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 checked:bg-primary checked:text-primary-foreground\"\n    \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\n);\n\nexport interface CheckboxProps\n    extends React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>,\n        VariantProps<typeof checkboxVariants> {}\n\nconst Checkbox = React.forwardRef<\n    React.ElementRef<typeof CheckboxPrimitive.Root>,\n    CheckboxProps\n>(({ className, ...props }, ref) => (\n    <CheckboxPrimitive.Root\n        ref={ref}\n        className={cn(checkboxVariants({ className }), \"\")}\n        {...props}\n    >\n        <CheckboxPrimitive.Indicator className={cn(\" text-current\")}>\n            <Check className=\"h-4 w-4 \" />\n        </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n));\n\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox, checkboxVariants };\n","\"use client\";\n\nimport * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst Separator = React.forwardRef<\n    React.ElementRef<typeof SeparatorPrimitive.Root>,\n    React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(({ className, orientation = \"horizontal\", decorative = true, ...props }, ref) => (\n    <SeparatorPrimitive.Root\n        ref={ref}\n        decorative={decorative}\n        orientation={orientation}\n        className={cn(\n            \"shrink-0 bg-border\",\n            orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n            className\n        )}\n        {...props}\n    />\n));\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n","import React from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\n\nexport interface SocialProvidersProps {\n    social: {\n        providers?: Array<{\n            alias: string;\n            loginUrl: string;\n            displayName: string;\n            iconClasses?: string;\n        }>;\n    };\n    kcClsx: (...args: any[]) => string;\n    clsx: (...args: any[]) => string;\n    msg: any;\n    realm: {\n        password: boolean;\n    };\n}\n\nexport const SocialProviders: React.FC<SocialProvidersProps> = ({\n    social,\n    kcClsx,\n    clsx,\n    msg,\n    realm\n}) => {\n    const providers = social.providers || [];\n\n    return (\n        realm.password &&\n        providers.length > 0 && (\n            <>\n                {realm.password &&\n                    social.providers !== undefined &&\n                    social.providers.length !== 0 && (\n                        <div id=\"kc-social-providers\" className=\"mt-5 space-y-7\">\n                            <h2 className=\"text-lg mt-7\">\n                                {msg(\"identity-provider-login-label\")}\n                            </h2>\n                            <div\n                                className={clsx(\n                                    \"text-lg grid gap-2 grid-cols-1\", // Apply a grid and gap between items\n                                    social.providers.length > 1\n                                        ? \"md:grid-cols-2\"\n                                        : \"grid-cols-1\" // Conditional grid columns\n                                )}\n                            >\n                                {social.providers.map((...[p, , providers]) => (\n                                    <div\n                                        key={p.alias}\n                                        className=\" items-center bg-accent  w-full py-1 my-1.5 border rounded-lg px-3 hover:bg-primary hover:text-primary-foreground\"\n                                    >\n                                        <a\n                                            id={`social-${p.alias}`}\n                                            className=\"flex flex-row items-center justify-center  w-full py-2 \"\n                                            type=\"button\"\n                                            href={p.loginUrl}\n                                        >\n                                            {p.iconClasses && (\n                                                <i\n                                                    className={clsx(p.iconClasses)}\n                                                    aria-hidden=\"true\"\n                                                ></i>\n                                            )}\n                                            <span\n                                                className=\"mx-3\"\n                                                dangerouslySetInnerHTML={{\n                                                    __html: p.displayName\n                                                }}\n                                            ></span>\n                                        </a>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n            </>\n        )\n    );\n};\n\nexport default SocialProviders;\n// <div\n//     id=\"kc-social-providers\"\n//     className={kcClsx(\"kcFormSocialAccountSectionClass\")}\n// >\n//     <hr />\n//     <h2>{msg(\"identity-provider-login-label\")}</h2>\n//     <ul\n//         className={kcClsx(\n//             \"kcFormSocialAccountListClass\",\n//             providers.length > 3 && \"kcFormSocialAccountListGridClass\"\n//         )}\n//     >\n//         {providers.map(p => (\n//             <li key={p.alias}>\n//                 <a\n//                     id={`social-${p.alias}`}\n//                     className={kcClsx(\n//                         \"kcFormSocialAccountListButtonClass\",\n//                         providers.length > 3 && \"kcFormSocialAccountGridItem\"\n//                     )}\n//                     type=\"button\"\n//                     href={p.loginUrl}\n//                 >\n//                     {p.iconClasses && (\n//                         <i\n//                             className={clsx(\n//                                 kcClsx(\"kcCommonLogoIdP\"),\n//                                 p.iconClasses\n//                             )}\n//                             aria-hidden=\"true\"\n//                         ></i>\n//                     )}\n//                     <span\n//                         className={clsx(\n//                             kcClsx(\"kcFormSocialAccountNameClass\"),\n//                             p.iconClasses && \"kc-social-icon-text\"\n//                         )}\n//                         dangerouslySetInnerHTML={{ __html: p.displayName }}\n//                     />\n//                 </a>\n//             </li>\n//         ))}\n//     </ul>\n// </div>\n","import { useState, useEffect, useReducer } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Button } from \"../../components/ui/button\";\nimport { Input } from \"../../components/ui/input\";\nimport { Label } from \"../../components/ui/label\";\nimport { checkboxVariants } from \"../../components/ui/checkbox\";\n\nimport { Separator } from \"../../components/ui/separator\";\nimport { PasswordWrapper } from \"../../components/ui/PasswordWrapper\";\nimport SocialProviders from \"../../components/ui/SocialProviders\";\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"username\", \"password\")}\n            headerNode={msg(\"loginAccountTitle\")}\n            displayInfo={realm.password && realm.registrationAllowed && !registrationDisabled}\n            infoNode={\n                <div id=\"kc-registration\" className=\"\">\n                    <span className=\"text-foreground text-xl\">\n                        {msgStr(\"noAccount\")}{\" \"}\n                        <a tabIndex={8} href={url.registrationUrl} className=\"mx-5 link-style \">\n                            {msgStr(\"doRegister\")}\n                        </a>\n                    </span>\n                </div>\n            }\n            socialProvidersNode={<SocialProviders social={social} kcClsx={kcClsx} clsx={clsx} msg={msg} realm={realm} />}\n        >\n            <div id=\"kc-form\">\n                <div id=\"kc-form-wrapper\">\n                    {realm.password && (\n                        <form\n                            id=\"kc-form-login\"\n                            onSubmit={() => {\n                                setIsLoginButtonDisabled(true);\n                                return true;\n                            }}\n                            action={url.loginAction}\n                            method=\"post\"\n                            className=\"space-y-6\"\n                        >\n                            {!usernameHidden && (\n                                <div>\n                                    <Label htmlFor=\"username\" className=\"text-lg\">\n                                        {!realm.loginWithEmailAllowed\n                                            ? msg(\"username\")\n                                            : !realm.registrationEmailAsUsername\n                                              ? msg(\"usernameOrEmail\")\n                                              : msg(\"email\")}\n                                    </Label>\n                                    <Input\n                                        tabIndex={2}\n                                        id=\"username\"\n                                        className=\"\"\n                                        name=\"username\"\n                                        defaultValue={login.username ?? \"\"}\n                                        type=\"text\"\n                                        autoFocus\n                                        autoComplete=\"username\"\n                                        aria-invalid={messagesPerField.existsError(\"username\", \"password\")}\n                                    />\n                                    {messagesPerField.existsError(\"username\", \"password\") && (\n                                        <div\n                                            // id=\"input-error\"\n                                            className=\"input-error py-3\"\n                                            aria-live=\"polite\"\n                                            dangerouslySetInnerHTML={{\n                                                __html: messagesPerField.getFirstError(\"username\", \"password\")\n                                            }}\n                                        />\n                                    )}\n                                </div>\n                            )}\n\n                            <div>\n                                <Label htmlFor=\"password\" className=\"text-lg\">\n                                    {msg(\"password\")}\n                                </Label>\n                                <PasswordWrapper kcClsx={kcClsx} i18n={i18n} passwordInputId=\"password\">\n                                    <Input\n                                        tabIndex={3}\n                                        id=\"password\"\n                                        className=\"text-foreground\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"current-password\"\n                                        aria-invalid={messagesPerField.existsError(\"username\", \"password\")}\n                                    />\n                                </PasswordWrapper>\n                                {usernameHidden && messagesPerField.existsError(\"username\", \"password\") && (\n                                    <span\n                                        id=\"input-error\"\n                                        className={kcClsx(\"kcInputErrorMessageClass\")}\n                                        aria-live=\"polite\"\n                                        dangerouslySetInnerHTML={{\n                                            __html: messagesPerField.getFirstError(\"username\", \"password\")\n                                        }}\n                                    />\n                                )}\n                            </div>\n\n                            <div className=\"space-y-2 md:space-y-0 md:flex md:justify-between text-lg \">\n                                <div>\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"flex items-center space-x-2 \">\n                                            <input\n                                                tabIndex={5}\n                                                // id=\"rememberMe\"\n                                                className={clsx(checkboxVariants({}), \"\")}\n                                                name=\"rememberMe\"\n                                                type=\"checkbox\"\n                                                defaultChecked={!!login.rememberMe}\n                                            />\n                                            <span>{msgStr(\"rememberMe\")}</span>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\" link-style\">\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={6} href={url.loginResetCredentialsUrl}>\n                                                {msgStr(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormGroupClass\")}>\n                                <Input type=\"hidden\" id=\"id-hidden-input\" name=\"credentialId\" value={auth.selectedCredential} />\n\n                                <Button tabIndex={7} disabled={isLoginButtonDisabled} type=\"submit\" className=\"w-full \">\n                                    {msgStr(\"doLogIn\")}\n                                </Button>\n                            </div>\n                            <Separator />\n                        </form>\n                    )}\n                </div>\n            </div>\n        </Template>\n    );\n}\n","import { useState } from \"react\";\nimport type { LazyOrNot } from \"keycloakify/tools/LazyOrNot\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { UserProfileFormFieldsProps } from \"keycloakify/login/UserProfileFormFieldsProps\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Button, buttonVariants } from \"../../components/ui/button\";\nimport { checkboxVariants } from \"../../components/ui/checkbox\";\ntype RegisterProps = PageProps<Extract<KcContext, { pageId: \"register.ftl\" }>, I18n> & {\n    UserProfileFormFields: LazyOrNot<(props: UserProfileFormFieldsProps) => JSX.Element>;\n    doMakeUserConfirmPassword: boolean;\n};\n\nexport default function Register(props: RegisterProps) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes, UserProfileFormFields, doMakeUserConfirmPassword } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey, termsAcceptanceRequired } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\n    const [areTermsAccepted, setAreTermsAccepted] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"registerTitle\")}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields\n        >\n            <form id=\"kc-register-form\" className=\"\" action={url.registrationAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    i18n={i18n}\n                    kcClsx={kcClsx}\n                    onIsFormSubmittableValueChange={setIsFormSubmittable}\n                    doMakeUserConfirmPassword={doMakeUserConfirmPassword}\n                />\n                {termsAcceptanceRequired && (\n                    <TermsAcceptance\n                        i18n={i18n}\n                        kcClsx={kcClsx}\n                        messagesPerField={messagesPerField}\n                        areTermsAccepted={areTermsAccepted}\n                        onAreTermsAcceptedValueChange={setAreTermsAccepted}\n                    />\n                )}\n                {recaptchaRequired && (\n                    <div className=\"form-group  pt-7\">\n                        <div className=\"mx-5\">\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"  \">\n                    <div className=\"mx-2\">\n                        <div>\n                            <span>\n                                <a href={url.loginUrl} className={buttonVariants({ variant: \"link\" })}>\n                                    {msg(\"backToLogin\")}\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                    <div id=\"kc-form-buttons\" className=\"px-5\">\n                        <Button\n                            disabled={!isFormSubmittable || (termsAcceptanceRequired && !areTermsAccepted)}\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                            type=\"submit\"\n                            className=\"w-full \"\n                            variant={\"default\"}\n                            //value={msgStr(\"doRegister\")}>\n                        >\n                            {msgStr(\"doRegister\")}\n                        </Button>\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n\nfunction TermsAcceptance(props: {\n    i18n: I18n;\n    kcClsx: KcClsx;\n    messagesPerField: Pick<KcContext[\"messagesPerField\"], \"existsError\" | \"get\">;\n    areTermsAccepted: boolean;\n    onAreTermsAcceptedValueChange: (areTermsAccepted: boolean) => void;\n}) {\n    const { i18n, kcClsx, messagesPerField, areTermsAccepted, onAreTermsAcceptedValueChange } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <>\n            <div className=\"form-group\">\n                <div className={kcClsx(\"kcInputWrapperClass\")}>\n                    {msg(\"termsTitle\")}\n                    <div id=\"kc-registration-terms-text\">{msg(\"termsText\")}</div>\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                    <div className=\"flex items-center space-x-2\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"termsAccepted\"\n                            name=\"termsAccepted\"\n                            className={checkboxVariants({})}\n                            checked={areTermsAccepted}\n                            onChange={e => onAreTermsAcceptedValueChange(e.target.checked)}\n                            aria-invalid={messagesPerField.existsError(\"termsAccepted\")}\n                        />\n                        <label htmlFor=\"termsAccepted\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"acceptTerms\")}\n                        </label>\n                    </div>\n                </div>\n                {messagesPerField.existsError(\"termsAccepted\") && (\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <span\n                            id=\"input-error-terms-accepted\"\n                            className={kcClsx(\"kcInputErrorMessageClass\")}\n                            aria-live=\"polite\"\n                            dangerouslySetInnerHTML={{\n                                __html: messagesPerField.get(\"termsAccepted\")\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst ScrollArea = React.forwardRef<\n    React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n    React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n    <ScrollAreaPrimitive.Root\n        ref={ref}\n        className={cn(\"relative overflow-hidden\", className)}\n        {...props}\n    >\n        <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n            {children}\n        </ScrollAreaPrimitive.Viewport>\n        <ScrollBar />\n        <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n    React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n    React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n        ref={ref}\n        orientation={orientation}\n        className={cn(\n            \"flex touch-none select-none transition-colors\",\n            orientation === \"vertical\" &&\n                \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n            orientation === \"horizontal\" &&\n                \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n            className\n        )}\n        {...props}\n    >\n        <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport clsx from \"clsx\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { ScrollArea } from \"../../components/ui/scroll-area\";\nimport { Button } from \"../../components/ui/button\";\nexport default function Terms(props: PageProps<Extract<KcContext, { pageId: \"terms.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { msg, msgStr } = i18n;\n\n    const { url } = kcContext;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={false}\n            headerNode={msg(\"termsTitle\")}\n        >\n            <div className=\"prose dark:prose-invert space-y-3\">\n                <div className=\"text-lg px-2 mb-3 max-h-72  bg-gray-50 dark:bg-gray-800  border\">\n                    <ScrollArea className=\"h-64 w-full\">{msg(\"termsText\")}</ScrollArea>\n                </div>\n                <form className=\"responsive-container \" action={url.loginAction} method=\"POST\">\n                    <Button name=\"accept\" className=\"w-full\" size=\"lg\" id=\"kc-accept\" type=\"submit\">\n                        {msgStr(\"doAccept\")}\n                    </Button>\n                    <Button variant={\"outline\"} className=\"w-full\" size=\"lg\" name=\"cancel\" id=\"kc-decline\" type=\"submit\">\n                        {msgStr(\"doDecline\")}\n                    </Button>\n                </form>\n                <div className=\"clearfix\" />\n            </div>\n        </Template>\n    );\n}\n","import type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nexport default function Error(props: PageProps<Extract<KcContext, { pageId: \"error.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { message, client, skipLink } = kcContext;\n\n    const { msg } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={false}\n            headerNode={msg(\"errorTitle\")}\n        >\n            <div id=\"kc-error-message\">\n                <p className=\"instruction\" dangerouslySetInnerHTML={{ __html: message.summary }} />\n                {!skipLink && client !== undefined && client.baseUrl !== undefined && (\n                    <p>\n                        <a id=\"backToApplication\" href={client.baseUrl} className={buttonVariants({ variant: \"link\" })}>\n                            {msg(\"backToApplication\")}\n                        </a>\n                    </p>\n                )}\n            </div>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Input } from \"../../components/ui/input\";\nimport { TextDisplay } from \"../../components/ui/TextDisplay\";\nexport default function Code(props: PageProps<Extract<KcContext, { pageId: \"code.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { code } = kcContext;\n\n    const { msg } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={code.success ? msg(\"codeSuccessTitle\") : msg(\"codeErrorTitle\", code.error)}\n        >\n            <div id=\"kc-code\">\n                {code.success ? (\n                    <>\n                        <p>{msg(\"copyCodeInstruction\")}</p>\n                        <Input id=\"code\" defaultValue={code.code} />\n                    </>\n                ) : (\n                    <p id=\"error\">{code.error}</p>\n                )}\n            </div>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Input } from \"../../components/ui/input\";\nimport { Button, buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nexport default function DeleteAccountConfirm(props: PageProps<Extract<KcContext, { pageId: \"delete-account-confirm.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, triggered_from_aia } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template kcContext={kcContext} i18n={i18n} doUseDefaultCss={doUseDefaultCss} classes={classes} headerNode={msg(\"deleteAccountConfirm\")}>\n            <form action={url.loginAction} className=\"form-vertical\" method=\"post\">\n                <div className=\"alert alert-warning\" style={{ marginTop: \"0\", marginBottom: \"30px\" }}>\n                    <span className=\"pficon pficon-warning-triangle-o\"></span>\n                    {msg(\"irreversibleAction\")}\n                </div>\n                <p>{msg(\"deletingImplies\")}</p>\n                <ul>\n                    <li>{msg(\"loggingOutImmediately\")}</li>\n                    <li>{msg(\"errasingData\")}</li>\n                </ul>\n                <p className=\"delete-account-text\">{msg(\"finalDeletionConfirmation\")}</p>\n                <div id=\"kc-form-buttons\" className=\"responsive-container\">\n                    <Input className={cn(buttonVariants({ variant: \"default\" }), \"w-full\")} type=\"submit\" value={msgStr(\"doConfirmDelete\")} />\n                    {triggered_from_aia && (\n                        <Button className=\"w-full\" type=\"submit\" name=\"cancel-aia\" value=\"true\" variant={\"secondary\"}>\n                            {msgStr(\"doCancel\")}\n                        </Button>\n                    )}\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nexport default function DeleteCredential(props: PageProps<Extract<KcContext, { pageId: \"delete-credential.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { msgStr, msg } = i18n;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, credentialLabel } = kcContext;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={false}\n            headerNode={msg(\"deleteCredentialTitle\", credentialLabel)}\n        >\n            <div id=\"kc-delete-text\" className=\"mb-5\">\n                {msg(\"deleteCredentialMessage\", credentialLabel)}\n            </div>\n            <form className=\"form-actions\" action={url.loginAction} method=\"POST\">\n                <div className=\"responsive-container\">\n                    <input\n                        className={cn(buttonVariants({ variant: \"default\" }), \"w-full\")}\n                        name=\"accept\"\n                        id=\"kc-accept\"\n                        type=\"submit\"\n                        value={msgStr(\"doConfirmDelete\")}\n                    />\n                    <input\n                        className={cn(buttonVariants({ variant: \"secondary\" }), \"w-full\")}\n                        name=\"cancel-aia\"\n                        value={msgStr(\"doCancel\")}\n                        id=\"kc-decline\"\n                        type=\"submit\"\n                    />\n                </div>\n            </form>\n            <div className=\"clearfix\" />\n        </Template>\n    );\n}\n","import { useEffect } from \"react\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nexport default function FrontchannelLogout(props: PageProps<Extract<KcContext, { pageId: \"frontchannel-logout.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { logout } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    useEffect(() => {\n        if (logout.logoutRedirectUri) {\n            window.location.replace(logout.logoutRedirectUri);\n        }\n    }, []);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            documentTitle={msgStr(\"frontchannel-logout.title\")}\n            headerNode={msg(\"frontchannel-logout.title\")}\n        >\n            <p>{msg(\"frontchannel-logout.message\")}</p>\n            <ul>\n                {logout.clients.map(client => (\n                    <li key={client.name}>\n                        {client.name}\n                        <iframe src={client.frontChannelLogoutUrl} style={{ display: \"none\" }} />\n                    </li>\n                ))}\n            </ul>\n            {logout.logoutRedirectUri && (\n                <a id=\"continue\" className={buttonVariants({variant:\"default\"})} href={logout.logoutRedirectUri}>\n                    {msg(\"doContinue\")}\n                </a>\n            )}\n        </Template>\n    );\n}\n","import { useState } from \"react\";\nimport type { LazyOrNot } from \"keycloakify/tools/LazyOrNot\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { UserProfileFormFieldsProps } from \"keycloakify/login/UserProfileFormFieldsProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\ntype IdpReviewUserProfileProps = PageProps<Extract<KcContext, { pageId: \"idp-review-user-profile.ftl\" }>, I18n> & {\n    UserProfileFormFields: LazyOrNot<(props: UserProfileFormFieldsProps) => JSX.Element>;\n    doMakeUserConfirmPassword: boolean;\n};\n\nexport default function IdpReviewUserProfile(props: IdpReviewUserProfileProps) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes, UserProfileFormFields, doMakeUserConfirmPassword } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { msg, msgStr } = i18n;\n\n    const { url, messagesPerField } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields\n            headerNode={msg(\"loginIdpReviewProfileTitle\")}\n        >\n            <form id=\"kc-idp-review-profile-form\" action={url.loginAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    i18n={i18n}\n                    onIsFormSubmittableValueChange={setIsFomSubmittable}\n                    kcClsx={kcClsx}\n                    doMakeUserConfirmPassword={doMakeUserConfirmPassword}\n                />\n                <div className=\"p-5\">\n                    <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n                        <div className={kcClsx(\"kcFormOptionsWrapperClass\")} />\n                    </div>\n                    <div id=\"kc-form-buttons\" className=\"bg-blue\">\n                        <input\n                            className={`${buttonVariants({ variant: \"default\" })} px-2 w-full`}\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                            type=\"submit\"\n                            value={msgStr(\"doSubmit\")}\n                            disabled={!isFomSubmittable}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","// components/TextDisplay.tsx\nimport React from \"react\";\n\ninterface TextDisplayProps {\n    children: React.ReactNode;\n    className?: string;\n}\n\nexport const TextDisplay: React.FC<TextDisplayProps> = ({ children, className }) => {\n    return (\n        <div\n            className={`font-mono text-sm p-2 bg-muted text-foreground rounded-md ${className}`}\n        >\n            {children}\n        </div>\n    );\n};\n","import { getKcClsx, KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Button, buttonVariants } from \"../../components/ui/button\";\nimport { Input } from \"../../components/ui/input\";\nimport { TextDisplay } from \"../../components/ui/TextDisplay\";\nimport { checkboxVariants } from \"../../components/ui/checkbox\";\nexport default function LoginConfigTotp(props: PageProps<Extract<KcContext, { pageId: \"login-config-totp.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, isAppInitiatedAction, totp, mode, messagesPerField } = kcContext;\n\n    const { msg, msgStr, advancedMsg } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"loginTotpTitle\")}\n            displayMessage={!messagesPerField.existsError(\"totp\", \"userLabel\")}\n        >\n            <>\n                <ol id=\"kc-totp-settings\">\n                    <li>\n                        <p>{msg(\"loginTotpStep1\")}</p>\n\n                        <ul id=\"kc-totp-supported-apps\">\n                            {totp.supportedApplications.map(app => (\n                                <li key={app}>{advancedMsg(app)}</li>\n                            ))}\n                        </ul>\n                    </li>\n\n                    {mode == \"manual\" ? (\n                        <>\n                            <li>\n                                <p>{msg(\"loginTotpManualStep2\")}</p>\n                                <p>\n                                    <TextDisplay>\n                                        <span>{totp.totpSecretEncoded}</span>\n                                    </TextDisplay>\n                                </p>\n                                <p>\n                                    <a href={totp.qrUrl} id=\"mode-barcode\">\n                                        {msg(\"loginTotpScanBarcode\")}\n                                    </a>\n                                </p>\n                            </li>\n                            <li>\n                                <p>{msg(\"loginTotpManualStep3\")}</p>\n                                <p>\n                                    <ul>\n                                        <li id=\"kc-totp-type\">\n                                            {msg(\"loginTotpType\")}: {msg(`loginTotp.${totp.policy.type}`)}\n                                        </li>\n                                        <li id=\"kc-totp-algorithm\">\n                                            {msg(\"loginTotpAlgorithm\")}: {totp.policy.getAlgorithmKey()}\n                                        </li>\n                                        <li id=\"kc-totp-digits\">\n                                            {msg(\"loginTotpDigits\")}: {totp.policy.digits}\n                                        </li>\n                                        {totp.policy.type === \"totp\" ? (\n                                            <li id=\"kc-totp-period\">\n                                                {msg(\"loginTotpInterval\")}: {totp.policy.period}\n                                            </li>\n                                        ) : (\n                                            <li id=\"kc-totp-counter\">\n                                                {msg(\"loginTotpCounter\")}: {totp.policy.initialCounter}\n                                            </li>\n                                        )}\n                                    </ul>\n                                </p>\n                            </li>\n                        </>\n                    ) : (\n                        <li>\n                            <p>{msg(\"loginTotpStep2\")}</p>\n                            <img id=\"kc-totp-secret-qr-code\" src={`data:image/png;base64, ${totp.totpSecretQrCode}`} alt=\"Figure: Barcode\" />\n                            <br />\n                            <p>\n                                <a href={totp.manualUrl} id=\"mode-manual\">\n                                    {msg(\"loginTotpUnableToScan\")}\n                                </a>\n                            </p>\n                        </li>\n                    )}\n                    <li>\n                        <p>{msg(\"loginTotpStep3\")}</p>\n                        <p>{msg(\"loginTotpStep3DeviceName\")}</p>\n                    </li>\n                </ol>\n\n                <form action={url.loginAction} className={kcClsx(\"kcFormClass\")} id=\"kc-totp-settings-form\" method=\"post\">\n                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                        <div className={kcClsx(\"kcInputWrapperClass\")}>\n                            <label htmlFor=\"totp\" className={kcClsx(\"kcLabelClass\")}>\n                                {msg(\"authenticatorCode\")}\n                            </label>{\" \"}\n                            <span className=\"required\">*</span>\n                        </div>\n                        <div className={kcClsx(\"kcInputWrapperClass\")}>\n                            <Input\n                                type=\"text\"\n                                id=\"totp\"\n                                name=\"totp\"\n                                autoComplete=\"off\"\n                                // className={kcClsx(\"kcInputClass\")}\n                                aria-invalid={messagesPerField.existsError(\"totp\")}\n                            />\n\n                            {messagesPerField.existsError(\"totp\") && (\n                                <span\n                                    id=\"input-error-otp-code\"\n                                    className={kcClsx(\"kcInputErrorMessageClass\")}\n                                    aria-live=\"polite\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: messagesPerField.get(\"totp\")\n                                    }}\n                                />\n                            )}\n                        </div>\n                        <Input type=\"hidden\" id=\"totpSecret\" name=\"totpSecret\" value={totp.totpSecret} />\n                        {mode && <input type=\"hidden\" id=\"mode\" value={mode} />}\n                    </div>\n\n                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                        <div className={kcClsx(\"kcInputWrapperClass\")}>\n                            <label htmlFor=\"userLabel\" className={kcClsx(\"kcLabelClass\")}>\n                                {msg(\"loginTotpDeviceName\")}\n                            </label>{\" \"}\n                            {totp.otpCredentials.length >= 1 && <span className=\"required\">*</span>}\n                        </div>\n                        <div className={kcClsx(\"kcInputWrapperClass\")}>\n                            <Input\n                                type=\"text\"\n                                id=\"userLabel\"\n                                name=\"userLabel\"\n                                autoComplete=\"off\"\n                                className={kcClsx(\"kcInputClass\")}\n                                aria-invalid={messagesPerField.existsError(\"userLabel\")}\n                            />\n                            {messagesPerField.existsError(\"userLabel\") && (\n                                <span\n                                    id=\"input-error-otp-label\"\n                                    className={kcClsx(\"kcInputErrorMessageClass\")}\n                                    aria-live=\"polite\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: messagesPerField.get(\"userLabel\")\n                                    }}\n                                />\n                            )}\n                        </div>\n                    </div>\n\n                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                        <LogoutOtherSessions kcClsx={kcClsx} i18n={i18n} />\n                    </div>\n\n                    {isAppInitiatedAction ? (\n                        <div className=\"flex space-x-2 items-center justify-between\">\n                            <input\n                                type=\"submit\"\n                                // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonLargeClass\")}\n                                className={`${buttonVariants({})} w-full`}\n                                id=\"saveTOTPBtn\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                            <button\n                                type=\"submit\"\n                                // className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonLargeClass\", \"kcButtonLargeClass\")}\n                                className={`${buttonVariants({ variant: \"outline\" })} w-full`}\n                                id=\"cancelTOTPBtn\"\n                                name=\"cancel-aia\"\n                                value=\"true\"\n                            >\n                                {msg(\"doCancel\")}\n                            </button>\n                        </div>\n                    ) : (\n                        <input\n                            type=\"submit\"\n                            className={`${buttonVariants({})} w-full`}\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonLargeClass\")}\n                            id=\"saveTOTPBtn\"\n                            value={msgStr(\"doSubmit\")}\n                        />\n                    )}\n                </form>\n            </>\n        </Template>\n    );\n}\n\nfunction LogoutOtherSessions(props: { kcClsx: KcClsx; i18n: I18n }) {\n    const { kcClsx, i18n } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n            <div>\n                <div className=\"checkbox flex items-center text-foreground\">\n                    <div className=\"flex items-center ml-5 space-x-2 \">\n                        <input type=\"checkbox\" className={`${checkboxVariants({})}`} name=\"logout-sessions\" value=\"on\" defaultChecked={true} />\n                        <span className=\"\">{msg(\"logoutOtherSessions\")}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Button } from \"../../components/ui/button\";\n\nexport default function LoginIdpLinkConfirm(props: PageProps<Extract<KcContext, { pageId: \"login-idp-link-confirm.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, idpAlias } = kcContext;\n\n    const { msg } = i18n;\n\n    return (\n        <Template kcContext={kcContext} i18n={i18n} doUseDefaultCss={doUseDefaultCss} classes={classes} headerNode={msg(\"confirmLinkIdpTitle\")}>\n            <form id=\"kc-register-form\" action={url.loginAction} method=\"post\">\n                <div className=\"responsive-container \">\n                    <Button type=\"submit\" className=\"flex-1\" name=\"submitAction\" id=\"updateProfile\" value=\"updateProfile\">\n                        {msg(\"confirmLinkIdpReviewProfile\")}\n                    </Button>\n                    <Button type=\"submit\" variant={\"outline\"} className=\"flex-1\" name=\"submitAction\" id=\"linkAccount\" value=\"linkAccount\">\n                        {msg(\"confirmLinkIdpContinue\", idpAlias)}\n                    </Button>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\n\nexport default function LoginIdpLinkEmail(props: PageProps<Extract<KcContext, { pageId: \"login-idp-link-email.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { url, realm, brokerContext, idpAlias } = kcContext;\n\n    const { msg } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"emailLinkIdpTitle\", idpAlias)}\n        >\n            <p id=\"instruction1\" className=\"instruction\">\n                {msg(\"emailLinkIdp1\", idpAlias, brokerContext.username, realm.displayName)}\n            </p>\n            <p id=\"instruction2\" className=\"instruction\">\n                {msg(\"emailLinkIdp2\")}\n                <a href={url.loginAction} className={`${buttonVariants({ variant: \"link\" })} px-0 py-0`}>\n                    {msg(\"doClickHere\")}\n                </a>\n                {msg(\"emailLinkIdp3\")}\n            </p>\n            <p id=\"instruction3\" className=\"instruction\">\n                {msg(\"emailLinkIdp4\")}\n                <a href={url.loginAction} className={`${buttonVariants({ variant: \"link\" })} px-0 py-0`}>\n                    {msg(\"doClickHere\")}\n                </a>\n                {msg(\"emailLinkIdp5\")}\n            </p>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nexport default function LoginOauthGrant(props: PageProps<Extract<KcContext, { pageId: \"login-oauth-grant.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, classes, Template } = props;\n    const { url, oauth, client } = kcContext;\n\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            bodyClassName=\"oauth\"\n            headerNode={\n                <>\n                    {client.attributes.logoUri && <img src={client.attributes.logoUri} />}\n                    <p>{client.name ? msg(\"oauthGrantTitle\", advancedMsgStr(client.name)) : msg(\"oauthGrantTitle\", client.clientId)}</p>\n                </>\n            }\n        >\n            <div id=\"kc-oauth\" className=\"content-area\">\n                <h3>{msg(\"oauthGrantRequest\")}</h3>\n                <ul>\n                    {oauth.clientScopesRequested.map(clientScope => (\n                        <li key={clientScope.consentScreenText}>\n                            <span>\n                                {advancedMsg(clientScope.consentScreenText)}\n                                {clientScope.dynamicScopeParameter && (\n                                    <>\n                                        : <b>{clientScope.dynamicScopeParameter}</b>\n                                    </>\n                                )}\n                            </span>\n                        </li>\n                    ))}\n                </ul>\n\n                {client.attributes.policyUri ||\n                    (client.attributes.tosUri && (\n                        <h3>\n                            {client.name ? msg(\"oauthGrantInformation\", advancedMsgStr(client.name)) : msg(\"oauthGrantInformation\", client.clientId)}\n                            {client.attributes.tosUri && (\n                                <>\n                                    {msg(\"oauthGrantReview\")}\n                                    <a href={client.attributes.tosUri} target=\"_blank\">\n                                        {msg(\"oauthGrantTos\")}\n                                    </a>\n                                </>\n                            )}\n                            {client.attributes.policyUri && (\n                                <>\n                                    {msg(\"oauthGrantReview\")}\n                                    <a href={client.attributes.policyUri} target=\"_blank\">\n                                        {msg(\"oauthGrantPolicy\")}\n                                    </a>\n                                </>\n                            )}\n                        </h3>\n                    ))}\n\n                <form className=\"form-actions\" action={url.oauthAction} method=\"POST\">\n                    <input type=\"hidden\" name=\"code\" value={oauth.code} />\n                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                        <div id=\"kc-form-options\">\n                            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}></div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\">\n                            {/* <div className={kcClsx(\"kcFormButtonsWrapperClass\")}> */}\n                            <div className=\"responsive-container\">\n                                <input\n                                    // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonLargeClass\")}\n                                    className={`${buttonVariants({ size: \"lg\" })} w-full`}\n                                    name=\"accept\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doYes\")}\n                                />\n                                <input\n                                    // className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonLargeClass\")}\n                                    className={`${buttonVariants({ variant: \"outline\", size: \"lg\" })} w-full`}\n                                    name=\"cancel\"\n                                    id=\"kc-cancel\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doNo\")}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </form>\n                <div className=\"clearfix\"></div>\n            </div>\n        </Template>\n    );\n}\n","import { Fragment } from \"react\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { Input } from \"../../components/ui/input\";\nimport clsx from \"clsx\";\n\nexport default function LoginOtp(props: PageProps<Extract<KcContext, { pageId: \"login-otp.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { otpLogin, url, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"totp\")}\n            headerNode={msg(\"doLogIn\")}\n        >\n            <form id=\"kc-otp-login-form\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                {otpLogin.userOtpCredentials.length > 1 && (\n                    <div>\n                        <div>\n                            <div className=\"grid grid-cols-1  md:grid-cols-2 gap-1 my-5\">\n                                {otpLogin.userOtpCredentials.map((otpCredential, index) => (\n                                    <Fragment key={index}>\n                                        {/* <div className=\"flex flex-row items-center space-x-2\"> */}\n                                        <div className=\"flex items-center \">\n                                            <input\n                                                id={`kc-otp-credential-${index}`}\n                                                className=\" \"\n                                                // className={kcClsx(\"kcLoginOTPListInputClass\")}\n                                                type=\"radio\"\n                                                name=\"selectedCredentialId\"\n                                                value={otpCredential.id}\n                                                defaultChecked={otpCredential.id === otpLogin.selectedCredentialId}\n                                            />\n\n                                            <label htmlFor={`kc-otp-credential-${index}`} tabIndex={index} className=\"mx-3\">\n                                                <div className=\"flex space-x-3  text-xl\">\n                                                    <span>\n                                                        <i className={kcClsx(\"kcLoginOTPListItemIconClass\")} aria-hidden=\"true\"></i>\n                                                    </span>\n                                                    <span className=\"\">{otpCredential.userLabel}</span>\n                                                </div>\n                                            </label>\n                                        </div>\n                                    </Fragment>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"otp\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"loginOtpOneTime\")}\n                        </label>\n                    </div>\n                    <div className={kcClsx(\"kcInputWrapperClass\")}>\n                        <Input\n                            id=\"otp\"\n                            name=\"otp\"\n                            autoComplete=\"off\"\n                            type=\"text\"\n                            className=\"mt-2\"\n                            // className={kcClsx(\"kcInputClass\")}\n                            autoFocus\n                            aria-invalid={messagesPerField.existsError(\"totp\")}\n                        />\n                        {messagesPerField.existsError(\"totp\") && (\n                            <span\n                                id=\"input-error-otp-code\"\n                                className={kcClsx(\"kcInputErrorMessageClass\")}\n                                aria-live=\"polite\"\n                                dangerouslySetInnerHTML={{\n                                    __html: messagesPerField.get(\"totp\")\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n                        <div className={kcClsx(\"kcFormOptionsWrapperClass\")}></div>\n                    </div>\n                    <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormButtonsClass\")}>\n                        <input\n                            //className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                            className={clsx(buttonVariants(), \"w-full\")}\n                            name=\"login\"\n                            id=\"kc-login\"\n                            type=\"submit\"\n                            value={msgStr(\"doLogIn\")}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\n\nexport default function LoginPageExpired(props: PageProps<Extract<KcContext, { pageId: \"login-page-expired.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { url } = kcContext;\n\n    const { msg } = i18n;\n\n    return (\n        <Template kcContext={kcContext} i18n={i18n} doUseDefaultCss={doUseDefaultCss} classes={classes} headerNode={msg(\"pageExpiredTitle\")}>\n            <p id=\"instruction1\" className=\"instruction\">\n                {msg(\"pageExpiredMsg1\")}\n                <a id=\"loginRestartLink\" href={url.loginRestartFlowUrl} className={cn(buttonVariants({ variant: \"link\" }), \"underline px-1\")}>\n                    {msg(\"doClickHere\")}\n                </a>{\" \"}\n                .<br />\n                {msg(\"pageExpiredMsg2\")}{\" \"}\n                <a id=\"loginContinueLink\" href={url.loginAction} className={cn(buttonVariants({ variant: \"link\" }), \"underline px-1\")}>\n                    {msg(\"doClickHere\")}\n                </a>{\" \"}\n                .\n            </p>\n        </Template>\n    );\n}\n","import { useState, useEffect, useReducer } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { PasswordWrapper } from \"../../components/ui/PasswordWrapper\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nimport { Input } from \"../../components/ui/input\";\nexport default function LoginPassword(props: PageProps<Extract<KcContext, { pageId: \"login-password.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { realm, url, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"doLogIn\")}\n            displayMessage={!messagesPerField.existsError(\"password\")}\n        >\n            <div id=\"kc-form\">\n                <div id=\"kc-form-wrapper\">\n                    <form\n                        id=\"kc-form-login\"\n                        onSubmit={() => {\n                            setIsLoginButtonDisabled(true);\n                            return true;\n                        }}\n                        action={url.loginAction}\n                        method=\"post\"\n                    >\n                        <div className={cn()}>\n                            {/* <hr /> */}\n                            <label htmlFor=\"password\" className={cn()}>\n                                {msg(\"password\")}\n                            </label>\n\n                            <PasswordWrapper kcClsx={kcClsx} i18n={i18n} passwordInputId=\"password\">\n                                <Input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoFocus\n                                    autoComplete=\"on\"\n                                    aria-invalid={messagesPerField.existsError(\"username\", \"password\")}\n                                />\n                            </PasswordWrapper>\n\n                            {messagesPerField.existsError(\"password\") && (\n                                <span\n                                    id=\"input-error-password\"\n                                    className={kcClsx(\"kcInputErrorMessageClass\")}\n                                    aria-live=\"polite\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: messagesPerField.get(\"password\")\n                                    }}\n                                />\n                            )}\n                        </div>\n                        <div className={kcClsx(\"kcFormGroupClass\", \"kcFormSettingClass\")}>\n                            <div id=\"kc-form-options\" />\n                            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                                {realm.resetPasswordAllowed && (\n                                    <span>\n                                        <a\n                                            tabIndex={5}\n                                            href={url.loginResetCredentialsUrl}\n                                            className={cn(buttonVariants({ variant: \"link\" }), \"underline px-0 mt-2\")}\n                                        >\n                                            {msg(\"doForgotPassword\")}\n                                        </a>\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n                        <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormGroupClass\")}>\n                            <input\n                                tabIndex={4}\n                                // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                                className={cn(buttonVariants(), \"w-full\")}\n                                name=\"login\"\n                                id=\"kc-login\"\n                                type=\"submit\"\n                                value={msgStr(\"doLogIn\")}\n                                disabled={isLoginButtonDisabled}\n                            />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </Template>\n    );\n}\n","import { Fragment } from \"react\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nexport default function LoginResetOtp(props: PageProps<Extract<KcContext, { pageId: \"login-reset-otp.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, configuredOtpCredentials } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"totp\")}\n            headerNode={msg(\"doLogIn\")}\n        >\n            <form id=\"kc-otp-reset-form\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <div className={kcClsx(\"kcInputWrapperClass\")}>\n                    <div className={kcClsx(\"kcInfoAreaWrapperClass\")}>\n                        <p id=\"kc-otp-reset-form-description\">{msg(\"otp-reset-description\")}</p>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5\">\n                            {configuredOtpCredentials.userOtpCredentials.map((otpCredential, index) => (\n                                <div key={otpCredential.id} className=\"flex items-center space-x-2 \">\n                                    <input\n                                        id={`kc-otp-credential-${index}`}\n                                        // className={kcClsx(\"kcLoginOTPListInputClass\")}\n                                        type=\"radio\"\n                                        name=\"selectedCredentialId\"\n                                        value={otpCredential.id}\n                                        defaultChecked={otpCredential.id === configuredOtpCredentials.selectedCredentialId}\n                                    />\n                                    <label htmlFor={`kc-otp-credential-${index}`} className=\"\" tabIndex={index}>\n                                        <div className=\"flex space-x-3  text-xl\">\n                                            <span className=\"\">\n                                                <i className={kcClsx(\"kcLoginOTPListItemIconClass\")} aria-hidden=\"true\"></i>\n                                            </span>\n                                            <span className=\"\">{otpCredential.userLabel}</span>\n                                        </div>\n                                    </label>\n                                </div>\n                            ))}\n                        </div>\n                        <div className={kcClsx(\"kcFormGroupClass\")}>\n                            <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormButtonsClass\")}>\n                                <input\n                                    id=\"kc-otp-reset-form-submit\"\n                                    // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                                    className={cn(buttonVariants(), \"w-full\")}\n                                    type=\"submit\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nimport { Input } from \"../../components/ui/input\";\nexport default function LoginResetPassword(props: PageProps<Extract<KcContext, { pageId: \"login-reset-password.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, realm, auth, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayInfo\n            displayMessage={!messagesPerField.existsError(\"username\")}\n            infoNode={realm.duplicateEmailsAllowed ? msg(\"emailInstructionUsername\") : msg(\"emailInstruction\")}\n            headerNode={msg(\"emailForgotTitle\")}\n        >\n            <form id=\"kc-reset-password-form\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"username\" className={kcClsx(\"kcLabelClass\")}>\n                            {!realm.loginWithEmailAllowed\n                                ? msg(\"username\")\n                                : !realm.registrationEmailAsUsername\n                                  ? msg(\"usernameOrEmail\")\n                                  : msg(\"email\")}\n                        </label>\n                    </div>\n                    <div className={kcClsx(\"kcInputWrapperClass\")}>\n                        <Input\n                            type=\"text\"\n                            id=\"username\"\n                            name=\"username\"\n                            // className={kcClsx(\"kcInputClass\")}\n                            autoFocus\n                            defaultValue={auth.attemptedUsername ?? \"\"}\n                            aria-invalid={messagesPerField.existsError(\"username\")}\n                        />\n                        {messagesPerField.existsError(\"username\") && (\n                            <span\n                                id=\"input-error-username\"\n                                className={kcClsx(\"kcInputErrorMessageClass\")}\n                                aria-live=\"polite\"\n                                dangerouslySetInnerHTML={{\n                                    __html: messagesPerField.get(\"username\")\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n                <div>\n                    <div id=\"kc-form-options\">\n                        <div>\n                            <span>\n                                <a href={url.loginUrl} className={cn(buttonVariants({ variant: \"link\" }), \"underline p-0 \")}>\n                                    {msg(\"backToLogin\")}\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className=\"\">\n                        <input\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                            className={cn(buttonVariants({ variant: \"default\" }), \"w-full \")}\n                            type=\"submit\"\n                            value={msgStr(\"doSubmit\")}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { useEffect, useReducer } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { PasswordWrapper } from \"../../components/ui/PasswordWrapper\";\nimport { Input } from \"../../components/ui/input\";\nimport { buttonVariants, Button } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nimport { checkboxVariants } from \"../../components/ui/checkbox\";\nexport default function LoginUpdatePassword(props: PageProps<Extract<KcContext, { pageId: \"login-update-password.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { msg, msgStr } = i18n;\n\n    const { url, messagesPerField, isAppInitiatedAction } = kcContext;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"password\", \"password-confirm\")}\n            headerNode={msg(\"updatePasswordTitle\")}\n        >\n            <form id=\"kc-passwd-update-form\" action={url.loginAction} method=\"post\" className=\"flex flex-col\">\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"password-new\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"passwordNew\")}\n                        </label>\n                    </div>\n                    <div className={kcClsx(\"kcInputWrapperClass\")}>\n                        <PasswordWrapper kcClsx={kcClsx} i18n={i18n} passwordInputId=\"password-new\">\n                            <Input\n                                type=\"password\"\n                                id=\"password-new\"\n                                name=\"password-new\"\n                                autoFocus\n                                autoComplete=\"new-password\"\n                                aria-invalid={messagesPerField.existsError(\"password\", \"password-confirm\")}\n                            />\n                        </PasswordWrapper>\n\n                        {messagesPerField.existsError(\"password\") && (\n                            <span\n                                id=\"input-error-password\"\n                                className={kcClsx(\"kcInputErrorMessageClass\")}\n                                aria-live=\"polite\"\n                                dangerouslySetInnerHTML={{\n                                    __html: messagesPerField.get(\"password\")\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"password-confirm\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"passwordConfirm\")}\n                        </label>\n                    </div>\n                    <div className={kcClsx(\"kcInputWrapperClass\")}>\n                        <PasswordWrapper kcClsx={kcClsx} i18n={i18n} passwordInputId=\"password-confirm\">\n                            <Input\n                                type=\"password\"\n                                id=\"password-confirm\"\n                                name=\"password-confirm\"\n                                autoFocus\n                                autoComplete=\"new-password\"\n                                aria-invalid={messagesPerField.existsError(\"password\", \"password-confirm\")}\n                            />\n                        </PasswordWrapper>\n\n                        {messagesPerField.existsError(\"password-confirm\") && (\n                            <span\n                                id=\"input-error-password-confirm\"\n                                className={kcClsx(\"kcInputErrorMessageClass\")}\n                                aria-live=\"polite\"\n                                dangerouslySetInnerHTML={{\n                                    __html: messagesPerField.get(\"password-confirm\")\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n\n                <LogoutOtherSessions kcClsx={kcClsx} i18n={i18n} />\n                <div className=\" responsive-container \">\n                    <input className={cn(buttonVariants(), \"w-full my-5\")} type=\"submit\" value={msgStr(\"doSubmit\")} />\n                    {isAppInitiatedAction && (\n                        <Button\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonLargeClass\")}\n                            className=\"w-full\"\n                            type=\"submit\"\n                            name=\"cancel-aia\"\n                            value=\"true\"\n                            variant={\"outline\"}\n                        >\n                            {msg(\"doCancel\")}\n                        </Button>\n                    )}\n                </div>\n            </form>\n        </Template>\n    );\n}\n\nfunction LogoutOtherSessions(props: { kcClsx: KcClsx; i18n: I18n }) {\n    const { kcClsx, i18n } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                <div className=\"checkbox\">\n                    <div className=\"flex items-center space-x-2\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"logout-sessions\"\n                            name=\"logout-sessions\"\n                            value=\"on\"\n                            defaultChecked={true}\n                            className={cn(checkboxVariants({}))}\n                        />\n                        <span>{msg(\"logoutOtherSessions\")}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { useState } from \"react\";\nimport type { LazyOrNot } from \"keycloakify/tools/LazyOrNot\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { UserProfileFormFieldsProps } from \"keycloakify/login/UserProfileFormFieldsProps\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\ntype LoginUpdateProfileProps = PageProps<Extract<KcContext, { pageId: \"login-update-profile.ftl\" }>, I18n> & {\n    UserProfileFormFields: LazyOrNot<(props: UserProfileFormFieldsProps) => JSX.Element>;\n    doMakeUserConfirmPassword: boolean;\n};\n\nexport default function LoginUpdateProfile(props: LoginUpdateProfileProps) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes, UserProfileFormFields, doMakeUserConfirmPassword } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { messagesPerField, url, isAppInitiatedAction } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayRequiredFields\n            headerNode={msg(\"loginProfileTitle\")}\n            displayMessage={messagesPerField.exists(\"global\")}\n        >\n            <form id=\"kc-update-profile-form\" action={url.loginAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    i18n={i18n}\n                    kcClsx={kcClsx}\n                    onIsFormSubmittableValueChange={setIsFormSubmittable}\n                    doMakeUserConfirmPassword={doMakeUserConfirmPassword}\n                />\n                <div className={\"mt-20 \"}>\n                    <div id=\"kc-form-buttons\" className={cn(isAppInitiatedAction ? \"responsive-container\" : \"\", \"px-5 \")}>\n                        <input\n                            disabled={!isFormSubmittable}\n                            className={cn(\" w-full \", buttonVariants({}))}\n                            type=\"submit\"\n                            value={msgStr(\"doSubmit\")}\n                        />\n                        {isAppInitiatedAction && (\n                            <button\n                                className={cn(\" w-full \", buttonVariants({ variant: \"outline\" }))}\n                                type=\"submit\"\n                                name=\"cancel-aia\"\n                                value=\"true\"\n                                formNoValidate\n                            >\n                                {msg(\"doCancel\")}\n                            </button>\n                        )}\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Input } from \"../../components/ui/input\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nimport { checkboxVariants } from \"../../components/ui/checkbox\";\nimport { SocialProviders } from \"../../components/ui/SocialProviders\";\n\nexport default function LoginUsername(props: PageProps<Extract<KcContext, { pageId: \"login-username.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameHidden, login, registrationDisabled, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"username\")}\n            displayInfo={realm.password && realm.registrationAllowed && !registrationDisabled}\n            infoNode={\n                <div id=\"kc-registration\">\n                    <span>\n                        <div className=\"flex items-center \">\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl} className={cn(buttonVariants({ variant: \"link\" }), \"underline px-2 mb-0.5\")}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </div>\n                    </span>\n                </div>\n            }\n            headerNode={msg(\"doLogIn\")}\n            socialProvidersNode={<SocialProviders social={social} kcClsx={kcClsx} clsx={clsx} msg={msg} realm={realm} />}\n        >\n            <div id=\"kc-form\">\n                <div id=\"kc-form-wrapper\">\n                    {realm.password && (\n                        <form\n                            id=\"kc-form-login\"\n                            onSubmit={() => {\n                                setIsLoginButtonDisabled(true);\n                                return true;\n                            }}\n                            action={url.loginAction}\n                            method=\"post\"\n                        >\n                            {!usernameHidden && (\n                                <div className={kcClsx(\"kcFormGroupClass\")}>\n                                    <label htmlFor=\"username\" className={kcClsx(\"kcLabelClass\")}>\n                                        {!realm.loginWithEmailAllowed\n                                            ? msg(\"username\")\n                                            : !realm.registrationEmailAsUsername\n                                              ? msg(\"usernameOrEmail\")\n                                              : msg(\"email\")}\n                                    </label>\n                                    <Input\n                                        tabIndex={2}\n                                        id=\"username\"\n                                        // className={kcClsx(\"kcInputClass\")}\n                                        name=\"username\"\n                                        defaultValue={login.username ?? \"\"}\n                                        type=\"text\"\n                                        autoFocus\n                                        autoComplete=\"off\"\n                                        aria-invalid={messagesPerField.existsError(\"username\")}\n                                    />\n                                    {messagesPerField.existsError(\"username\") && (\n                                        <span id=\"input-error\" className={kcClsx(\"kcInputErrorMessageClass\")} aria-live=\"polite\">\n                                            {messagesPerField.getFirstError(\"username\")}\n                                        </span>\n                                    )}\n                                </div>\n                            )}\n\n                            <div>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div>\n                                            <div className=\"flex items-center space-x-2\">\n                                                <input\n                                                    tabIndex={3}\n                                                    className={checkboxVariants({})}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    defaultChecked={!!login.rememberMe}\n                                                />{\" \"}\n                                                {msg(\"rememberMe\")}\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n\n                            <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormGroupClass\")}>\n                                <input\n                                    tabIndex={4}\n                                    disabled={isLoginButtonDisabled}\n                                    // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                                    className={cn(buttonVariants({}), \"w-full\")}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </Template>\n    );\n}\n","import type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\n\nexport default function LoginVerifyEmail(props: PageProps<Extract<KcContext, { pageId: \"login-verify-email.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { msg } = i18n;\n\n    const { url, user } = kcContext;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayInfo\n            headerNode={msg(\"emailVerifyTitle\")}\n            infoNode={\n                <p className=\"instruction bg-muted border border-secondary rounded-md p-4 shadow-sm\">\n                    {msg(\"emailVerifyInstruction2\")}\n                    <br />\n                    <a href={url.loginAction} className={cn(buttonVariants({ variant: \"link\" }), \"underline px-0 bg-muted\")}>\n                        {msg(\"doClickHere\")}\n                    </a>\n                    &nbsp;\n                    {msg(\"emailVerifyInstruction3\")}\n                </p>\n            }\n        >\n            <p className=\"instruction\">{msg(\"emailVerifyInstruction1\", user?.email ?? \"\")}</p>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\n\nexport default function LoginX509Info(props: PageProps<Extract<KcContext, { pageId: \"login-x509-info.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, x509 } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template kcContext={kcContext} i18n={i18n} doUseDefaultCss={doUseDefaultCss} classes={classes} headerNode={msg(\"doLogIn\")}>\n            <form id=\"kc-x509-login-info\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"certificate_subjectDN\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"clientCertificate\")}\n                        </label>\n                    </div>\n                    {x509.formData.subjectDN ? (\n                        <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                            <label id=\"certificate_subjectDN\" className={kcClsx(\"kcLabelClass\")}>\n                                {x509.formData.subjectDN}\n                            </label>\n                        </div>\n                    ) : (\n                        <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                            <label id=\"certificate_subjectDN\" className={kcClsx(\"kcLabelClass\")}>\n                                {msg(\"noCertificate\")}\n                            </label>\n                        </div>\n                    )}\n                </div>\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    {x509.formData.isUserEnabled && (\n                        <>\n                            <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                                <label htmlFor=\"username\" className={kcClsx(\"kcLabelClass\")}>\n                                    {msg(\"doX509Login\")}\n                                </label>\n                            </div>\n                            <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                                <label id=\"username\" className={kcClsx(\"kcLabelClass\")}>\n                                    {x509.formData.username}\n                                </label>\n                            </div>\n                        </>\n                    )}\n                </div>\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n                        <div className={kcClsx(\"kcFormOptionsWrapperClass\")} />\n                    </div>\n                    <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormButtonsClass\")}>\n                        <div className=\"responsive-container\">\n                            <input\n                                className={cn(buttonVariants({ size: \"lg\" }), \"w-full\")}\n                                // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonLargeClass\")}\n                                name=\"login\"\n                                id=\"kc-login\"\n                                type=\"submit\"\n                                value={msgStr(\"doContinue\")}\n                            />\n                            {x509.formData.isUserEnabled && (\n                                <input\n                                    className={cn(buttonVariants({ variant: \"outline\", size: \"lg\" }), \"w-full\")}\n                                    // className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonLargeClass\")}\n                                    name=\"cancel\"\n                                    id=\"kc-cancel\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doIgnore\")}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { cn } from \"../../lib/utils\";\nimport { buttonVariants } from \"../../components/ui/button\";\nexport default function LogoutConfirm(props: PageProps<Extract<KcContext, { pageId: \"logout-confirm.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, client, logoutConfirm } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template kcContext={kcContext} i18n={i18n} doUseDefaultCss={doUseDefaultCss} classes={classes} headerNode={msg(\"logoutConfirmTitle\")}>\n            <div id=\"kc-logout-confirm\" className=\"content-area\">\n                <p className=\"instruction\">{msg(\"logoutConfirmHeader\")}</p>\n                <form className=\"form-actions\" action={url.logoutConfirmAction} method=\"POST\">\n                    <input type=\"hidden\" name=\"session_code\" value={logoutConfirm.code} />\n                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                        <div id=\"kc-form-options\">\n                            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}></div>\n                        </div>\n                        <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormGroupClass\")}>\n                            <input\n                                tabIndex={4}\n                                className={cn(buttonVariants({}), \"w-full\")}\n                                name=\"confirmLogout\"\n                                id=\"kc-logout\"\n                                type=\"submit\"\n                                value={msgStr(\"doLogout\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n                <div id=\"kc-info-message\">\n                    {!logoutConfirm.skipLink && client.baseUrl && (\n                        <p>\n                            <a href={client.baseUrl} className={cn(buttonVariants({ variant: \"link\" }), \"px-0 underline\")}>\n                                {msg(\"backToApplication\")}\n                            </a>\n                        </p>\n                    )}\n                </div>\n            </div>\n        </Template>\n    );\n}\n","import { useEffect, useState } from \"react\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function SamlPostForm(props: PageProps<Extract<KcContext, { pageId: \"saml-post-form.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { msgStr, msg } = i18n;\n\n    const { samlPost } = kcContext;\n\n    const [htmlFormElement, setHtmlFormElement] = useState<HTMLFormElement | null>(null);\n\n    useEffect(() => {\n        if (htmlFormElement === null) {\n            return;\n        }\n\n        // Storybook\n        if (samlPost.url === \"#\") {\n            alert(\"In a real Keycloak the user would be redirected immediately\");\n            return;\n        }\n\n        htmlFormElement.submit();\n    }, [htmlFormElement]);\n    return (\n        <Template kcContext={kcContext} i18n={i18n} doUseDefaultCss={doUseDefaultCss} classes={classes} headerNode={msg(\"saml.post-form.title\")}>\n            <p>{msg(\"saml.post-form.message\")}</p>\n            <form name=\"saml-post-binding\" method=\"post\" action={samlPost.url} ref={setHtmlFormElement}>\n                {samlPost.SAMLRequest && <input type=\"hidden\" name=\"SAMLRequest\" value={samlPost.SAMLRequest} />}\n                {samlPost.SAMLResponse && <input type=\"hidden\" name=\"SAMLResponse\" value={samlPost.SAMLResponse} />}\n                {samlPost.relayState && <input type=\"hidden\" name=\"RelayState\" value={samlPost.relayState} />}\n                <noscript>\n                    <p>{msg(\"saml.post-form.js-disabled\")}</p>\n                    <input type=\"submit\" value={msgStr(\"doContinue\")} />\n                </noscript>\n            </form>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Button } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nimport { ChevronRightIcon } from \"@heroicons/react/20/solid\";\nexport default function SelectAuthenticator(props: PageProps<Extract<KcContext, { pageId: \"select-authenticator.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n    const { url, auth } = kcContext;\n\n    const { kcClsx } = getKcClsx({ doUseDefaultCss, classes });\n    const { msg, advancedMsg } = i18n;\n    const debug = false;\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayInfo={false}\n            headerNode={msg(\"loginChooseAuthenticator\")}\n        >\n            <form id=\"kc-select-credential-form\" action={url.loginAction} method=\"post\">\n                <div className=\" space-y-3 \">\n                    {auth.authenticationSelections.map((authenticationSelection, i) => (\n                        <Button\n                            key={i}\n                            variant={\"secondary\"}\n                            className=\"h-auto grid grid-cols-10   text-left w-full px-5 py-2 \"\n                            type=\"submit\"\n                            name=\"authenticationExecution\"\n                            value={authenticationSelection.authExecId}\n                        >\n                            <div className=\"items-start justify-start text-center py-2 h-full col-span-2 \">\n                                <i className={kcClsx(\"kcSelectAuthListItemIconPropertyClass\", authenticationSelection.iconCssClass)} />\n                            </div>\n                            <div className=\" col-span-7 space-y-2 px-5   h-full w-full   items-start \">\n                                <div className={cn(\" h-full w-full  p-0 items-center\")}>\n                                    <div className={cn(\"w-full py-2   font-bold\", { \"bg-red-100\": debug })}>\n                                        <span className=\"text-wrap \">{advancedMsg(authenticationSelection.displayName)}</span>\n                                    </div>\n                                    <div className={cn(\"w-full   row-span-2 text-wrap text-sm py-2\", { \"bg-blue-100\": debug })}>\n                                        {advancedMsg(authenticationSelection.helpText)}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"flex items-center justify-center w-full h-full  py-5 \">\n                                <ChevronRightIcon className={cn(\"w-5 h-5\", kcClsx(\"kcSelectAuthListItemArrowIconClass\"))} />\n                            </div>\n                        </Button>\n                    ))}\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { useState } from \"react\";\nimport type { LazyOrNot } from \"keycloakify/tools/LazyOrNot\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { UserProfileFormFieldsProps } from \"keycloakify/login/UserProfileFormFieldsProps\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants, Button } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nimport { checkboxVariants } from \"../../components/ui/checkbox\";\ntype UpdateEmailProps = PageProps<Extract<KcContext, { pageId: \"update-email.ftl\" }>, I18n> & {\n    UserProfileFormFields: LazyOrNot<(props: UserProfileFormFieldsProps) => JSX.Element>;\n    doMakeUserConfirmPassword: boolean;\n};\n\nexport default function UpdateEmail(props: UpdateEmailProps) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes, UserProfileFormFields, doMakeUserConfirmPassword } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { msg, msgStr } = i18n;\n\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\n\n    const { url, messagesPerField, isAppInitiatedAction } = kcContext;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields\n            headerNode={msg(\"updateEmailTitle\")}\n        >\n            <form id=\"kc-update-email-form\" className=\" \" action={url.loginAction} method=\"post\">\n                <div className=\"flex flex-col\">\n                    <UserProfileFormFields\n                        kcContext={kcContext}\n                        i18n={i18n}\n                        kcClsx={kcClsx}\n                        onIsFormSubmittableValueChange={setIsFormSubmittable}\n                        doMakeUserConfirmPassword={doMakeUserConfirmPassword}\n                    />\n                    <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n                        <div className={kcClsx(\"kcFormOptionsWrapperClass\")} />\n                    </div>\n                    <LogoutOtherSessions kcClsx={kcClsx} i18n={i18n} />\n\n                    <div id=\"kc-form-buttons\" className=\"responsive-container \">\n                        <input disabled={!isFormSubmittable} className={cn(buttonVariants(), \"w-full\")} type=\"submit\" value={msgStr(\"doSubmit\")} />\n                        {isAppInitiatedAction && (\n                            <Button\n                                // className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonLargeClass\")}\n                                className=\"w-full\"\n                                type=\"submit\"\n                                name=\"cancel-aia\"\n                                value=\"true\"\n                            >\n                                {msg(\"doCancel\")}\n                            </Button>\n                        )}\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n\nfunction LogoutOtherSessions(props: { kcClsx: KcClsx; i18n: I18n }) {\n    const { kcClsx, i18n } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n            <div>\n                <div>\n                    <div className=\"flex items-center space-x-2\">\n                        <input\n                            type=\"checkbox\"\n                            className={cn(checkboxVariants())}\n                            id=\"logout-sessions\"\n                            name=\"logout-sessions\"\n                            value=\"on\"\n                            defaultChecked={true}\n                        />\n                        {msg(\"logoutOtherSessions\")}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { useEffect, Fragment } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useInsertScriptTags } from \"keycloakify/tools/useInsertScriptTags\";\nimport { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\n\nexport default function WebauthnAuthenticate(props: PageProps<Extract<KcContext, { pageId: \"webauthn-authenticate.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({ doUseDefaultCss, classes });\n\n    const {\n        url,\n        isUserIdentified,\n        challenge,\n        userVerification,\n        rpId,\n        createTimeout,\n        messagesPerField,\n        realm,\n        registrationDisabled,\n        authenticators,\n        shouldDisplayAuthenticators\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg } = i18n;\n\n    const { insertScriptTags } = useInsertScriptTags({\n        componentOrHookName: \"WebauthnAuthenticate\",\n        scriptTags: [\n            {\n                type: \"text/javascript\",\n                src: `${url.resourcesCommonPath}/node_modules/jquery/dist/jquery.min.js`\n            },\n            {\n                type: \"text/javascript\",\n                src: `${url.resourcesPath}/js/base64url.js`\n            },\n            {\n                type: \"text/javascript\",\n                textContent: `\n\n                    function webAuthnAuthenticate() {\n                        let isUserIdentified = ${isUserIdentified};\n                        if (!isUserIdentified) {\n                            doAuthenticate([]);\n                            return;\n                        }\n                        checkAllowCredentials();\n                    }\n\n                    function checkAllowCredentials() {\n                        let allowCredentials = [];\n                        let authn_use = document.forms['authn_select'].authn_use_chk;\n                    \n                        if (authn_use !== undefined) {\n                            if (authn_use.length === undefined) {\n                                allowCredentials.push({\n                                    id: base64url.decode(authn_use.value, {loose: true}),\n                                    type: 'public-key',\n                                });\n                            } else {\n                                for (let i = 0; i < authn_use.length; i++) {\n                                    allowCredentials.push({\n                                        id: base64url.decode(authn_use[i].value, {loose: true}),\n                                        type: 'public-key',\n                                    });\n                                }\n                            }\n                        }\n                        doAuthenticate(allowCredentials);\n                    }\n\n\n                    function doAuthenticate(allowCredentials) {\n                    \n                        // Check if WebAuthn is supported by this browser\n                        if (!window.PublicKeyCredential) {\n                            $(\"#error\").val(\"${msgStr(\"webauthn-unsupported-browser-text\")}\");\n                            $(\"#webauth\").submit();\n                            return;\n                        }\n                    \n                        let challenge = \"${challenge}\";\n                        let userVerification = \"${userVerification}\";\n                        let rpId = \"${rpId}\";\n                        let publicKey = {\n                            rpId : rpId,\n                            challenge: base64url.decode(challenge, { loose: true })\n                        };\n                    \n                        let createTimeout = ${createTimeout};\n                        if (createTimeout !== 0) publicKey.timeout = createTimeout * 1000;\n                    \n                        if (allowCredentials.length) {\n                            publicKey.allowCredentials = allowCredentials;\n                        }\n                    \n                        if (userVerification !== 'not specified') publicKey.userVerification = userVerification;\n                    \n                        navigator.credentials.get({publicKey})\n                            .then((result) => {\n                                window.result = result;\n                            \n                                let clientDataJSON = result.response.clientDataJSON;\n                                let authenticatorData = result.response.authenticatorData;\n                                let signature = result.response.signature;\n                            \n                                $(\"#clientDataJSON\").val(base64url.encode(new Uint8Array(clientDataJSON), { pad: false }));\n                                $(\"#authenticatorData\").val(base64url.encode(new Uint8Array(authenticatorData), { pad: false }));\n                                $(\"#signature\").val(base64url.encode(new Uint8Array(signature), { pad: false }));\n                                $(\"#credentialId\").val(result.id);\n                                if(result.response.userHandle) {\n                                    $(\"#userHandle\").val(base64url.encode(new Uint8Array(result.response.userHandle), { pad: false }));\n                                }\n                                $(\"#webauth\").submit();\n                            })\n                            .catch((err) => {\n                                $(\"#error\").val(err);\n                                $(\"#webauth\").submit();\n                            })\n                        ;\n                    }\n\n                `\n            }\n        ]\n    });\n\n    useEffect(() => {\n        insertScriptTags();\n    }, []);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"username\")}\n            displayInfo={realm.password && realm.registrationAllowed && !registrationDisabled}\n            infoNode={\n                <div id=\"kc-registration\">\n                    <span>\n                        {msg(\"noAccount\")}{\" \"}\n                        <a tabIndex={6} href={url.registrationUrl} className={cn(buttonVariants({ variant: \"link\" }), \"underline py-0 px-2\")}>\n                            {msg(\"doRegister\")}\n                        </a>\n                    </span>\n                </div>\n            }\n            headerNode={msg(\"webauthn-login-title\")}\n        >\n            <div id=\"kc-form-webauthn\" className={kcClsx(\"kcFormClass\")}>\n                <form id=\"webauth\" action={url.loginAction} method=\"post\">\n                    <input type=\"hidden\" id=\"clientDataJSON\" name=\"clientDataJSON\" />\n                    <input type=\"hidden\" id=\"authenticatorData\" name=\"authenticatorData\" />\n                    <input type=\"hidden\" id=\"signature\" name=\"signature\" />\n                    <input type=\"hidden\" id=\"credentialId\" name=\"credentialId\" />\n                    <input type=\"hidden\" id=\"userHandle\" name=\"userHandle\" />\n                    <input type=\"hidden\" id=\"error\" name=\"error\" />\n                </form>\n                <div className={clsx(kcClsx(\"kcFormGroupClass\"), \"no-bottom-margin\")}>\n                    {authenticators && (\n                        <>\n                            <form id=\"authn_select\" className={kcClsx(\"kcFormClass\")}>\n                                {authenticators.authenticators.map(authenticator => (\n                                    <input type=\"hidden\" name=\"authn_use_chk\" value={authenticator.credentialId} />\n                                ))}\n                            </form>\n\n                            {shouldDisplayAuthenticators && (\n                                <>\n                                    {authenticators.authenticators.length > 1 && (\n                                        <p className={kcClsx(\"kcSelectAuthListItemTitle\")}>{msg(\"webauthn-available-authenticators\")}</p>\n                                    )}\n                                    <div className={kcClsx(\"kcFormOptionsClass\")}>\n                                        {authenticators.authenticators.map((authenticator, i) => (\n                                            <div key={i} id=\"kc-webauthn-authenticator\" className={kcClsx(\"kcSelectAuthListItemClass\")}>\n                                                <div className={kcClsx(\"kcSelectAuthListItemIconClass\")}>\n                                                    <i\n                                                        className={clsx(\n                                                            (() => {\n                                                                const className = kcClsx(authenticator.transports.iconClass as any);\n                                                                if (className === authenticator.transports.iconClass) {\n                                                                    return kcClsx(\"kcWebAuthnDefaultIcon\");\n                                                                }\n                                                                return className;\n                                                            })(),\n                                                            kcClsx(\"kcSelectAuthListItemIconPropertyClass\")\n                                                        )}\n                                                    />\n                                                </div>\n                                                <div>\n                                                    <div id=\"kc-webauthn-authenticator-label\" className={kcClsx(\"kcSelectAuthListItemHeadingClass\")}>\n                                                        {advancedMsg(authenticator.label)}\n                                                    </div>\n                                                    {authenticator.transports.displayNameProperties?.length && (\n                                                        <div\n                                                            id=\"kc-webauthn-authenticator-transport\"\n                                                            className={kcClsx(\"kcSelectAuthListItemDescriptionClass\")}\n                                                        >\n                                                            {authenticator.transports.displayNameProperties\n                                                                .map((displayNameProperty, i, arr) => ({\n                                                                    displayNameProperty,\n                                                                    hasNext: i !== arr.length - 1\n                                                                }))\n                                                                .map(({ displayNameProperty, hasNext }) => (\n                                                                    <Fragment key={displayNameProperty}>\n                                                                        {advancedMsg(displayNameProperty)}\n                                                                        {hasNext && <span>, </span>}\n                                                                    </Fragment>\n                                                                ))}\n                                                        </div>\n                                                    )}\n                                                    <div className={kcClsx(\"kcSelectAuthListItemDescriptionClass\")}>\n                                                        <span id=\"kc-webauthn-authenticator-created-label\">{msg(\"webauthn-createdAt-label\")}</span>\n                                                        <span id=\"kc-webauthn-authenticator-created\">{authenticator.createdAt}</span>\n                                                    </div>\n                                                    <div className={kcClsx(\"kcSelectAuthListItemFillClass\")} />\n                                                </div>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </>\n                            )}\n                        </>\n                    )}\n\n                    <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormButtonsClass\")}>\n                        <input\n                            id=\"authenticateWebAuthnButton\"\n                            type=\"button\"\n                            onClick={() => {\n                                assert(\"webAuthnAuthenticate\" in window);\n                                assert(typeof window.webAuthnAuthenticate === \"function\");\n                                window.webAuthnAuthenticate();\n                            }}\n                            autoFocus\n                            value={msgStr(\"webauthn-doAuthenticate\")}\n                            className={cn(buttonVariants({}), \"w-full\")}\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                        />\n                    </div>\n                </div>\n            </div>\n        </Template>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Button, buttonVariants } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nexport default function WebauthnError(props: PageProps<Extract<KcContext, { pageId: \"webauthn-error.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { url, isAppInitiatedAction } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage\n            headerNode={msg(\"webauthn-error-title\")}\n        >\n            <div className=\"responsive-container\">\n                <form id=\"kc-error-credential-form\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                    <input type=\"hidden\" id=\"executionValue\" name=\"authenticationExecution\" />\n                    <input type=\"hidden\" id=\"isSetRetry\" name=\"isSetRetry\" />\n                </form>\n                <input\n                    tabIndex={4}\n                    onClick={() => {\n                        // @ts-expect-error: Trusted Keycloak's code\n                        document.getElementById(\"isSetRetry\").value = \"retry\";\n                        // @ts-expect-error: Trusted Keycloak's code\n                        document.getElementById(\"executionValue\").value = \"${execution}\";\n                        // @ts-expect-error: Trusted Keycloak's code\n                        document.getElementById(\"kc-error-credential-form\").submit();\n                    }}\n                    type=\"button\"\n                    // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                    className={cn(buttonVariants(), \"w-full\")}\n                    name=\"try-again\"\n                    id=\"kc-try-again\"\n                    value={msgStr(\"doTryAgain\")}\n                />\n                {isAppInitiatedAction && (\n                    <form action={url.loginAction} className=\"w-full\" id=\"kc-webauthn-settings-form\" method=\"post\">\n                        <Button\n                            type=\"submit\"\n                            className=\"w-full\"\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                            variant=\"outline\"\n                            id=\"cancelWebAuthnAIA\"\n                            name=\"cancel-aia\"\n                            value=\"true\"\n                        >\n                            {msgStr(\"doCancel\")}\n                        </Button>\n                    </form>\n                )}\n            </div>\n        </Template>\n    );\n}\n","import { useEffect } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport { useInsertScriptTags } from \"keycloakify/tools/useInsertScriptTags\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants, Button } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\nimport { checkboxVariants } from \"../../components/ui/checkbox\";\n\nexport default function WebauthnRegister(props: PageProps<Extract<KcContext, { pageId: \"webauthn-register.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({ doUseDefaultCss, classes });\n\n    const {\n        url,\n        challenge,\n        userid,\n        username,\n        signatureAlgorithms,\n        rpEntityName,\n        rpId,\n        attestationConveyancePreference,\n        authenticatorAttachment,\n        requireResidentKey,\n        userVerificationRequirement,\n        createTimeout,\n        excludeCredentialIds,\n        isSetRetry,\n        isAppInitiatedAction\n    } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { insertScriptTags } = useInsertScriptTags({\n        componentOrHookName: \"WebauthnRegister\",\n        scriptTags: [\n            {\n                type: \"text/javascript\",\n                src: `${url.resourcesCommonPath}/node_modules/jquery/dist/jquery.min.js`\n            },\n            {\n                type: \"text/javascript\",\n                src: `${url.resourcesPath}/js/base64url.js`\n            },\n            {\n                type: \"text/javascript\",\n                textContent: `\n                function registerSecurityKey() {\n\n                    // Check if WebAuthn is supported by this browser\n                    if (!window.PublicKeyCredential) {\n                        $(\"#error\").val(\"${msgStr(\"webauthn-unsupported-browser-text\")}\");\n                        $(\"#register\").submit();\n                        return;\n                    }\n    \n                    // mandatory parameters\n                    let challenge = \"${challenge}\";\n                    let userid = \"${userid}\";\n                    let username = \"${username}\";\n    \n                    let signatureAlgorithms =${JSON.stringify(signatureAlgorithms)};\n                    let pubKeyCredParams = getPubKeyCredParams(signatureAlgorithms);\n    \n                    let rpEntityName = \"${rpEntityName}\";\n                    let rp = {name: rpEntityName};\n    \n                    let publicKey = {\n                        challenge: base64url.decode(challenge, {loose: true}),\n                        rp: rp,\n                        user: {\n                            id: base64url.decode(userid, {loose: true}),\n                            name: username,\n                            displayName: username\n                        },\n                        pubKeyCredParams: pubKeyCredParams,\n                    };\n    \n                    // optional parameters\n                    let rpId = \"${rpId}\";\n                    publicKey.rp.id = rpId;\n    \n                    let attestationConveyancePreference = \"${attestationConveyancePreference}\";\n                    if (attestationConveyancePreference !== 'not specified') publicKey.attestation = attestationConveyancePreference;\n    \n                    let authenticatorSelection = {};\n                    let isAuthenticatorSelectionSpecified = false;\n    \n                    let authenticatorAttachment = \"${authenticatorAttachment}\";\n                    if (authenticatorAttachment !== 'not specified') {\n                        authenticatorSelection.authenticatorAttachment = authenticatorAttachment;\n                        isAuthenticatorSelectionSpecified = true;\n                    }\n    \n                    let requireResidentKey = \"${requireResidentKey}\";\n                    if (requireResidentKey !== 'not specified') {\n                        if (requireResidentKey === 'Yes')\n                            authenticatorSelection.requireResidentKey = true;\n                        else\n                            authenticatorSelection.requireResidentKey = false;\n                        isAuthenticatorSelectionSpecified = true;\n                    }\n    \n                    let userVerificationRequirement = \"${userVerificationRequirement}\";\n                    if (userVerificationRequirement !== 'not specified') {\n                        authenticatorSelection.userVerification = userVerificationRequirement;\n                        isAuthenticatorSelectionSpecified = true;\n                    }\n    \n                    if (isAuthenticatorSelectionSpecified) publicKey.authenticatorSelection = authenticatorSelection;\n    \n                    let createTimeout = ${createTimeout};\n                    if (createTimeout !== 0) publicKey.timeout = createTimeout * 1000;\n    \n                    let excludeCredentialIds = \"${excludeCredentialIds}\";\n                    let excludeCredentials = getExcludeCredentials(excludeCredentialIds);\n                    if (excludeCredentials.length > 0) publicKey.excludeCredentials = excludeCredentials;\n    \n                    navigator.credentials.create({publicKey})\n                        .then(function (result) {\n                            window.result = result;\n                            let clientDataJSON = result.response.clientDataJSON;\n                            let attestationObject = result.response.attestationObject;\n                            let publicKeyCredentialId = result.rawId;\n    \n                            $(\"#clientDataJSON\").val(base64url.encode(new Uint8Array(clientDataJSON), {pad: false}));\n                            $(\"#attestationObject\").val(base64url.encode(new Uint8Array(attestationObject), {pad: false}));\n                            $(\"#publicKeyCredentialId\").val(base64url.encode(new Uint8Array(publicKeyCredentialId), {pad: false}));\n    \n                            if (typeof result.response.getTransports === \"function\") {\n                                let transports = result.response.getTransports();\n                                if (transports) {\n                                    $(\"#transports\").val(getTransportsAsString(transports));\n                                }\n                            } else {\n                                console.log(\"Your browser is not able to recognize supported transport media for the authenticator.\");\n                            }\n    \n                            let initLabel = \"WebAuthn Authenticator (Default Label)\";\n                            let labelResult = window.prompt(\"Please input your registered authenticator's label\", initLabel);\n                            if (labelResult === null) labelResult = initLabel;\n                            $(\"#authenticatorLabel\").val(labelResult);\n    \n                            $(\"#register\").submit();\n    \n                        })\n                        .catch(function (err) {\n                            $(\"#error\").val(err);\n                            $(\"#register\").submit();\n    \n                        });\n                }\n    \n                function getPubKeyCredParams(signatureAlgorithmsList) {\n                    let pubKeyCredParams = [];\n                    if (signatureAlgorithmsList.length === 0) {\n                        pubKeyCredParams.push({type: \"public-key\", alg: -7});\n                        return pubKeyCredParams;\n                    }\n    \n                    for (let i = 0; i < signatureAlgorithmsList.length; i++) {\n                        pubKeyCredParams.push({\n                            type: \"public-key\",\n                            alg: signatureAlgorithmsList[i]\n                        });\n                    }\n                    return pubKeyCredParams;\n                }\n    \n                function getExcludeCredentials(excludeCredentialIds) {\n                    let excludeCredentials = [];\n                    if (excludeCredentialIds === \"\") return excludeCredentials;\n    \n                    let excludeCredentialIdsList = excludeCredentialIds.split(',');\n    \n                    for (let i = 0; i < excludeCredentialIdsList.length; i++) {\n                        excludeCredentials.push({\n                            type: \"public-key\",\n                            id: base64url.decode(excludeCredentialIdsList[i],\n                            {loose: true})\n                        });\n                    }\n                    return excludeCredentials;\n                }\n    \n                function getTransportsAsString(transportsList) {\n                    if (transportsList === '' || Array.isArray(transportsList)) return \"\";\n    \n                    let transportsString = \"\";\n    \n                    for (let i = 0; i < transportsList.length; i++) {\n                        transportsString += transportsList[i] + \",\";\n                    }\n    \n                    return transportsString.slice(0, -1);\n                }\n                `\n            }\n        ]\n    });\n\n    useEffect(() => {\n        insertScriptTags();\n    }, []);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={\n                <>\n                    <span className={kcClsx(\"kcWebAuthnKeyIcon\")} />\n                    {msg(\"webauthn-registration-title\")}\n                </>\n            }\n        >\n            <form id=\"register\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <input type=\"hidden\" id=\"clientDataJSON\" name=\"clientDataJSON\" />\n                    <input type=\"hidden\" id=\"attestationObject\" name=\"attestationObject\" />\n                    <input type=\"hidden\" id=\"publicKeyCredentialId\" name=\"publicKeyCredentialId\" />\n                    <input type=\"hidden\" id=\"authenticatorLabel\" name=\"authenticatorLabel\" />\n                    <input type=\"hidden\" id=\"transports\" name=\"transports\" />\n                    <input type=\"hidden\" id=\"error\" name=\"error\" />\n                    <LogoutOtherSessions kcClsx={kcClsx} i18n={i18n} />\n                </div>\n            </form>\n            <div className=\"responsive-container \">\n                <input\n                    type=\"submit\"\n                    // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                    className={cn(buttonVariants({}), \"w-full\")}\n                    id=\"registerWebAuthn\"\n                    value={msgStr(\"doRegisterSecurityKey\")}\n                    onClick={() => {\n                        assert(\"registerSecurityKey\" in window);\n                        assert(typeof window.registerSecurityKey === \"function\");\n                        window.registerSecurityKey();\n                    }}\n                />\n\n                {!isSetRetry && isAppInitiatedAction && (\n                    <form action={url.loginAction} className=\"all-unset w-full !p-0 \" id=\"kc-webauthn-settings-form\" method=\"post\">\n                        <Button\n                            type=\"submit\"\n                            variant=\"outline\"\n                            className=\"w-full\"\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                            id=\"cancelWebAuthnAIA\"\n                            name=\"cancel-aia\"\n                            value=\"true\"\n                        >\n                            {msg(\"doCancel\")}\n                        </Button>\n                    </form>\n                )}\n            </div>\n        </Template>\n    );\n}\n\nfunction LogoutOtherSessions(props: { kcClsx: KcClsx; i18n: I18n }) {\n    const { kcClsx, i18n } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <div id=\"kc-form-options\" className=\"ml-6\">\n            <div>\n                <div>\n                    <div className=\"flex items-center space-x-4\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"logout-sessions\"\n                            name=\"logout-sessions\"\n                            value=\"on\"\n                            defaultChecked={true}\n                            className={cn(checkboxVariants(), \"bg-black\")}\n                        />\n                        <span>{msg(\"logoutOtherSessions\")}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { Input } from \"../../components/ui/input\";\nimport { cn } from \"../../lib/utils\";\nexport default function LoginOauth2DeviceVerifyUserCode(\n    props: PageProps<Extract<KcContext, { pageId: \"login-oauth2-device-verify-user-code.ftl\" }>, I18n>\n) {\n    const { kcContext, i18n, doUseDefaultCss, classes, Template } = props;\n    const { url } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"oauth2DeviceVerificationTitle\")}\n        >\n            <form\n                id=\"kc-user-verify-device-user-code-form\"\n                className={kcClsx(\"kcFormClass\")}\n                action={url.oauth2DeviceVerificationAction}\n                method=\"post\"\n            >\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"device-user-code\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"verifyOAuth2DeviceUserCode\")}\n                        </label>\n                    </div>\n\n                    <div className={kcClsx(\"kcInputWrapperClass\")}>\n                        <Input\n                            id=\"device-user-code\"\n                            name=\"device_user_code\"\n                            autoComplete=\"off\"\n                            type=\"text\"\n                            className={kcClsx(\"kcInputClass\")}\n                            autoFocus\n                        />\n                    </div>\n                </div>\n\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n                        <div className={kcClsx(\"kcFormOptionsWrapperClass\")}></div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormButtonsClass\")}>\n                        <div className={kcClsx(\"kcFormButtonsWrapperClass\")}>\n                            <input\n                                // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonLargeClass\")}\n                                className={cn(buttonVariants(), \"w-full\")}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { useEffect } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport { useInsertScriptTags } from \"keycloakify/tools/useInsertScriptTags\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { checkboxVariants } from \"../../components/ui/checkbox\";\nimport { buttonVariants, Button } from \"../../components/ui/button\";\nimport { cn } from \"../../lib/utils\";\n\nexport default function LoginRecoveryAuthnCodeConfig(props: PageProps<Extract<KcContext, { pageId: \"login-recovery-authn-code-config.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { recoveryAuthnCodesConfigBean, isAppInitiatedAction } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { insertScriptTags } = useInsertScriptTags({\n        componentOrHookName: \"LoginRecoveryAuthnCodeConfig\",\n        scriptTags: [\n            {\n                type: \"text/javascript\",\n                textContent: `\n\n                    /* copy recovery codes  */\n                    function copyRecoveryCodes() {\n                        var tmpTextarea = document.createElement(\"textarea\");\n                        var codes = document.getElementById(\"kc-recovery-codes-list\").getElementsByTagName(\"li\");\n                        for (i = 0; i < codes.length; i++) {\n                            tmpTextarea.value = tmpTextarea.value + codes[i].innerText + \"\\\\n\";\n                        }\n                        document.body.appendChild(tmpTextarea);\n                        tmpTextarea.select();\n                        document.execCommand(\"copy\");\n                        document.body.removeChild(tmpTextarea);\n                    }\n\n                    var copyButton = document.getElementById(\"copyRecoveryCodes\");\n                    copyButton && copyButton.addEventListener(\"click\", function () {\n                        copyRecoveryCodes();\n                    });\n\n                    /* download recovery codes  */\n                    function formatCurrentDateTime() {\n                        var dt = new Date();\n                        var options = {\n                            month: 'long',\n                            day: 'numeric',\n                            year: 'numeric',\n                            hour: 'numeric',\n                            minute: 'numeric',\n                            timeZoneName: 'short'\n                        };\n\n                        return dt.toLocaleString('en-US', options);\n                    }\n\n                    function parseRecoveryCodeList() {\n                        var recoveryCodes = document.querySelectorAll(\".kc-recovery-codes-list li\");\n                        var recoveryCodeList = \"\";\n\n                        for (var i = 0; i < recoveryCodes.length; i++) {\n                            var recoveryCodeLiElement = recoveryCodes[i].innerText;\n                            recoveryCodeList += recoveryCodeLiElement + \"\\\\r\\\\n\";\n                        }\n\n                        return recoveryCodeList;\n                    }\n\n                    function buildDownloadContent() {\n                        var recoveryCodeList = parseRecoveryCodeList();\n                        var dt = new Date();\n                        var options = {\n                            month: 'long',\n                            day: 'numeric',\n                            year: 'numeric',\n                            hour: 'numeric',\n                            minute: 'numeric',\n                            timeZoneName: 'short'\n                        };\n\n                        return fileBodyContent =\n                            \"${msgStr(\"recovery-codes-download-file-header\")}\\\\n\\\\n\" +\n                            recoveryCodeList + \"\\\\n\" +\n                            \"${msgStr(\"recovery-codes-download-file-description\")}\\\\n\\\\n\" +\n                            \"${msgStr(\"recovery-codes-download-file-date\")} \" + formatCurrentDateTime();\n                    }\n\n                    function setUpDownloadLinkAndDownload(filename, text) {\n                        var el = document.createElement('a');\n                        el.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n                        el.setAttribute('download', filename);\n                        el.style.display = 'none';\n                        document.body.appendChild(el);\n                        el.click();\n                        document.body.removeChild(el);\n                    }\n\n                    function downloadRecoveryCodes() {\n                        setUpDownloadLinkAndDownload('kc-download-recovery-codes.txt', buildDownloadContent());\n                    }\n\n                    var downloadButton = document.getElementById(\"downloadRecoveryCodes\");\n                    downloadButton && downloadButton.addEventListener(\"click\", downloadRecoveryCodes);\n\n                    /* print recovery codes */\n                    function buildPrintContent() {\n                        var recoveryCodeListHTML = document.getElementById('kc-recovery-codes-list').innerHTML;\n                        var styles =\n                            \\`@page { size: auto;  margin-top: 0; }\n                            body { width: 480px; }\n                            div { list-style-type: none; font-family: monospace }\n                            p:first-of-type { margin-top: 48px }\\`;\n\n                        return printFileContent =\n                            \"<html><style>\" + styles + \"</style><body>\" +\n                            \"<title>kc-download-recovery-codes</title>\" +\n                            \"<p>${msgStr(\"recovery-codes-download-file-header\")}</p>\" +\n                            \"<div>\" + recoveryCodeListHTML + \"</div>\" +\n                            \"<p>${msgStr(\"recovery-codes-download-file-description\")}</p>\" +\n                            \"<p>${msgStr(\"recovery-codes-download-file-date\")} \" + formatCurrentDateTime() + \"</p>\" +\n                            \"</body></html>\";\n                    }\n\n                    function printRecoveryCodes() {\n                        var w = window.open();\n                        w.document.write(buildPrintContent());\n                        w.print();\n                        w.close();\n                    }\n\n                    var printButton = document.getElementById(\"printRecoveryCodes\");\n                    printButton && printButton.addEventListener(\"click\", printRecoveryCodes);\n                `\n            }\n        ]\n    });\n\n    useEffect(() => {\n        insertScriptTags();\n    }, []);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"recovery-code-config-header\")}\n        >\n            <div className=\"space-y-3\">\n                <div className={clsx(\"pf-c-alert\", \"pf-m-warning\", \"pf-m-inline\", kcClsx(\"kcRecoveryCodesWarning\"))} aria-label=\"Warning alert\">\n                    <div className=\"pf-c-alert__icon\">\n                        <i className=\"pficon-warning-triangle-o\" aria-hidden=\"true\" />\n                    </div>\n                    <h4 className=\"pf-c-alert__title\">\n                        <span className=\"pf-screen-reader\">Warning alert:</span>\n                        {msg(\"recovery-code-config-warning-title\")}\n                    </h4>\n                    <div className=\"pf-c-alert__description\">\n                        <p>{msg(\"recovery-code-config-warning-message\")}</p>\n                    </div>\n                </div>\n\n                <ol id=\"kc-recovery-codes-list\" className=\"border rounded-md \">\n                    {recoveryAuthnCodesConfigBean.generatedRecoveryAuthnCodesList.map((code, index) => (\n                        <li key={index}>\n                            <span>{index + 1}:</span> {code.slice(0, 4)}-{code.slice(4, 8)}-{code.slice(8)}\n                        </li>\n                    ))}\n                </ol>\n\n                {/* actions */}\n                <div className=\"responsive-container \">\n                    <Button id=\"printRecoveryCodes\" variant=\"secondary\" size=\"lg\" type=\"button\" className=\"flex-1 px-2\">\n                        <i className=\"pficon-print\" aria-hidden=\"true\" /> <span className=\"mx-2 py-2\">{msg(\"recovery-codes-print\")}</span>\n                    </Button>\n                    <Button id=\"downloadRecoveryCodes\" variant=\"secondary\" size=\"lg\" type=\"button\" className=\"flex-1 px-2\">\n                        <i className=\"pficon-save\" aria-hidden=\"true\" /> <span className=\"mx-2 py-2\">{msg(\"recovery-codes-download\")}</span>\n                    </Button>\n                    <Button id=\"copyRecoveryCodes\" variant=\"secondary\" size=\"lg\" type=\"button\" className=\"flex-1 px-2\">\n                        <i className=\"pficon-blueprint\" aria-hidden=\"true\" /> <span className=\"mx-2 py-2\">{msg(\"recovery-codes-copy\")}</span>\n                    </Button>\n                </div>\n\n                {/* confirmation checkbox */}\n                <div className=\"flex space-x-2 items-center\">\n                    <input\n                        // className={kcClsx(\"kcCheckInputClass\")}\n                        className={cn(checkboxVariants({}), \"!py-0\")}\n                        type=\"checkbox\"\n                        id=\"kcRecoveryCodesConfirmationCheck\"\n                        name=\"kcRecoveryCodesConfirmationCheck\"\n                        onChange={function () {\n                            //@ts-expect-error: This is code from the original theme, we trust it.\n                            document.getElementById(\"saveRecoveryAuthnCodesBtn\").disabled = !this.checked;\n                        }}\n                    />\n                    <div>{msg(\"recovery-codes-confirmation-message\")}</div>\n                </div>\n\n                <form action={kcContext.url.loginAction} className={kcClsx(\"kcFormGroupClass\")} id=\"kc-recovery-codes-settings-form\" method=\"post\">\n                    <input\n                        type=\"hidden\"\n                        name=\"generatedRecoveryAuthnCodes\"\n                        value={recoveryAuthnCodesConfigBean.generatedRecoveryAuthnCodesAsString}\n                    />\n                    <input type=\"hidden\" name=\"generatedAt\" value={recoveryAuthnCodesConfigBean.generatedAt} />\n                    <input type=\"hidden\" id=\"userLabel\" name=\"userLabel\" value={msgStr(\"recovery-codes-label-default\")} />\n\n                    <LogoutOtherSessions kcClsx={kcClsx} i18n={i18n} />\n\n                    {isAppInitiatedAction ? (\n                        <div className=\"flex justify-between w-full space-x-2\">\n                            <input\n                                type=\"submit\"\n                                // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonLargeClass\")}\n                                className={cn(buttonVariants(), \"w-full\")}\n                                id=\"saveRecoveryAuthnCodesBtn\"\n                                value={msgStr(\"recovery-codes-action-complete\")}\n                                disabled\n                            />\n                            <Button\n                                type=\"submit\"\n                                className=\"w-full\"\n                                variant={\"outline\"}\n                                // className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonLargeClass\")}\n                                id=\"cancelRecoveryAuthnCodesBtn\"\n                                name=\"cancel-aia\"\n                                value=\"true\"\n                            >\n                                {msg(\"recovery-codes-action-cancel\")}\n                            </Button>\n                        </div>\n                    ) : (\n                        <input\n                            type=\"submit\"\n                            // className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                            className={cn(buttonVariants(), \"w-full\")}\n                            id=\"saveRecoveryAuthnCodesBtn\"\n                            value={msgStr(\"recovery-codes-action-complete\")}\n                            disabled\n                        />\n                    )}\n                </form>\n            </div>\n        </Template>\n    );\n}\n\nfunction LogoutOtherSessions(props: { kcClsx: KcClsx; i18n: I18n }) {\n    const { kcClsx, i18n } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                <div className=\"checkbox\">\n                    <div className=\"flex items-center flex-row\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"logout-sessions\"\n                            name=\"logout-sessions\"\n                            value=\"on\"\n                            defaultChecked={true}\n                            className={cn(checkboxVariants({}), \"!py-0\")}\n                        />\n                        <span className=\"mx-2\">{msg(\"logoutOtherSessions\")}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { getKcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\nimport { buttonVariants } from \"../../components/ui/button\";\nimport { Input } from \"../../components/ui/input\";\nimport { cn } from \"../../lib/utils\";\nexport default function LoginRecoveryAuthnCodeInput(props: PageProps<Extract<KcContext, { pageId: \"login-recovery-authn-code-input.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, recoveryAuthnCodesInputBean } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"auth-recovery-code-header\")}\n            displayMessage={!messagesPerField.existsError(\"recoveryCodeInput\")}\n        >\n            <form id=\"kc-recovery-code-login-form\" className={kcClsx(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div className={kcClsx(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"recoveryCodeInput\" className={kcClsx(\"kcLabelClass\")}>\n                            {msg(\"auth-recovery-code-prompt\", `${recoveryAuthnCodesInputBean.codeNumber}`)}\n                        </label>\n                    </div>\n                    <div className={kcClsx(\"kcInputWrapperClass\")}>\n                        <Input\n                            tabIndex={1}\n                            id=\"recoveryCodeInput\"\n                            name=\"recoveryCodeInput\"\n                            aria-invalid={messagesPerField.existsError(\"recoveryCodeInput\")}\n                            autoComplete=\"off\"\n                            type=\"text\"\n                            className={kcClsx(\"kcInputClass\")}\n                            autoFocus\n                        />\n                        {messagesPerField.existsError(\"recoveryCodeInput\") && (\n                            <span\n                                id=\"input-error\"\n                                className={kcClsx(\"kcInputErrorMessageClass\")}\n                                aria-live=\"polite\"\n                                dangerouslySetInnerHTML={{\n                                    __html: messagesPerField.get(\"recoveryCodeInput\")\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n\n                <div className={kcClsx(\"kcFormGroupClass\")}>\n                    <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                        <div className={kcClsx(\"kcFormOptionsWrapperClass\")} />\n                    </div>\n                    <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormButtonsClass\")}>\n                        <input className={cn(buttonVariants({}), \"w-full\")} name=\"login\" id=\"kc-login\" type=\"submit\" value={msgStr(\"doLogIn\")} />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { Suspense, lazy } from \"react\";\nimport type { ClassKey } from \"keycloakify/login\";\nimport type { KcContext } from \"./KcContext\";\nimport { useI18n } from \"./i18n\";\nimport DefaultPage from \"keycloakify/login/DefaultPage\";\nimport { Template as CustomTemplate } from \"./Template\";\nimport \"./../styles/global.css\";\nimport Info from \"./pages/Info\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Terms from \"./pages/Terms\";\nimport Error from \"./pages/Error\";\nimport Code from \"./pages/Code\";\nimport DeleteAccountConfirm from \"./pages/DeleteAccountConfirm\";\nimport DeleteCredential from \"./pages/DeleteCredential\";\nimport FrontchannelLogout from \"./pages/FrontchannelLogout\";\nimport IdpReviewUserProfile from \"./pages/IdpReviewUserProfile\";\nimport LoginConfigTotp from \"./pages/LoginConfigTotp\";\nimport LoginIdpLinkConfirm from \"./pages/LoginIdpLinkConfirm\";\nimport LoginIdpLinkEmail from \"./pages/LoginIdpLinkEmail\";\nimport LoginOauthGrant from \"./pages/LoginOauthGrant\";\nimport LoginOtp from \"./pages/LoginOtp\";\nimport LoginPageExpired from \"./pages/LoginPageExpired\";\nimport LoginPassword from \"./pages/LoginPassword\";\nimport LoginResetOtp from \"./pages/LoginResetOtp\";\nimport LoginResetPassword from \"./pages/LoginResetPassword\";\nimport LoginUpdatePassword from \"./pages/LoginUpdatePassword\";\nimport LoginUpdateProfile from \"./pages/LoginUpdateProfile\";\nimport LoginUsername from \"./pages/LoginUsername\";\nimport LoginVerifyEmail from \"./pages/LoginVerifyEmail\";\nimport LoginX509Info from \"./pages/LoginX509Info\";\nimport LogoutConfirm from \"./pages/LogoutConfirm\";\nimport SamlPostForm from \"./pages/SamlPostForm\";\nimport SelectAuthenticator from \"./pages/SelectAuthenticator\";\nimport UpdateEmail from \"./pages/UpdateEmail\";\nimport WebauthnAuthenticate from \"./pages/WebauthnAuthenticate\";\nimport WebauthnError from \"./pages/WebauthnError\";\nimport WebauthnRegister from \"./pages/WebauthnRegister\";\nimport LoginOauth2DeviceVerifyUserCode from \"./pages/LoginOauth2DeviceVerifyUserCode\";\nimport LoginRecoveryAuthnCodeConfig from \"./pages/LoginRecoveryAuthnCodeConfig\";\nimport LoginRecoveryAuthnCodeInput from \"./pages/LoginRecoveryAuthnCodeInput\";\nconst UserProfileFormFields = lazy(() => import(\"./UserProfileFormFields\"));\n\n// Base component to render DefaultPage\nconst Base = ({\n    kcContext,\n    i18n,\n    classes\n}: {\n    kcContext: KcContext;\n    i18n: any;\n    classes: any;\n}) => {\n    return (\n        <DefaultPage\n            kcContext={kcContext}\n            i18n={i18n}\n            classes={classes}\n            Template={CustomTemplate}\n            doUseDefaultCss={true}\n            UserProfileFormFields={UserProfileFormFields}\n            doMakeUserConfirmPassword={doMakeUserConfirmPassword}\n        />\n    );\n};\n\nconst doMakeUserConfirmPassword = true;\n\nexport default function KcPage(props: { kcContext: KcContext }) {\n    const kcContext = props.kcContext; // Get the `legacy` flag as a prop\n    const { i18n } = useI18n({ kcContext });\n\n    return (\n        <Suspense>\n            {(() => {\n                switch (kcContext.pageId) {\n                    case \"login-recovery-authn-code-input.ftl\":\n                        return (\n                            <LoginRecoveryAuthnCodeInput\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-recovery-authn-code-config.ftl\":\n                        return (\n                            <LoginRecoveryAuthnCodeConfig\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-oauth2-device-verify-user-code.ftl\":\n                        return (\n                            <LoginOauth2DeviceVerifyUserCode\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"webauthn-register.ftl\":\n                        return (\n                            <WebauthnRegister\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"webauthn-error.ftl\":\n                        return (\n                            <WebauthnError\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"webauthn-authenticate.ftl\":\n                        return (\n                            <WebauthnAuthenticate\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"update-email.ftl\":\n                        return (\n                            <UpdateEmail\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                                UserProfileFormFields={UserProfileFormFields} // Pass the required UserProfileFormFields prop\n                                doMakeUserConfirmPassword={true} // or false, depending on your requirement\n                            />\n                        );\n                    case \"select-authenticator.ftl\":\n                        return (\n                            <SelectAuthenticator\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"saml-post-form.ftl\":\n                        return (\n                            <SamlPostForm\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"logout-confirm.ftl\":\n                        return (\n                            <LogoutConfirm\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-x509-info.ftl\":\n                        return (\n                            <LoginX509Info\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-verify-email.ftl\":\n                        return (\n                            <LoginVerifyEmail\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-username.ftl\":\n                        return (\n                            <LoginUsername\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-update-profile.ftl\":\n                        return (\n                            <LoginUpdateProfile\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                                UserProfileFormFields={UserProfileFormFields} // Pass the required UserProfileFormFields prop\n                                doMakeUserConfirmPassword={true} // or false, depending on your requirement\n                            />\n                        );\n                    case \"login-update-password.ftl\":\n                        return (\n                            <LoginUpdatePassword\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-reset-password.ftl\":\n                        return (\n                            <LoginResetPassword\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-reset-otp.ftl\":\n                        return (\n                            <LoginResetOtp\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-password.ftl\":\n                        return (\n                            <LoginPassword\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-page-expired.ftl\":\n                        return (\n                            <LoginPageExpired\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-otp.ftl\":\n                        return (\n                            <LoginOtp\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-oauth-grant.ftl\":\n                        return (\n                            <LoginOauthGrant\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-idp-link-email.ftl\":\n                        return (\n                            <LoginIdpLinkEmail\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-idp-link-confirm.ftl\":\n                        return (\n                            <LoginIdpLinkConfirm\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"login-config-totp.ftl\":\n                        return (\n                            <LoginConfigTotp\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"info.ftl\":\n                        return (\n                            <Info\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"idp-review-user-profile.ftl\":\n                        return (\n                            <IdpReviewUserProfile\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                                UserProfileFormFields={UserProfileFormFields} // Pass the required UserProfileFormFields prop\n                                doMakeUserConfirmPassword={true} // or false, depending on your requirement\n                            />\n                        );\n                    case \"frontchannel-logout.ftl\":\n                        return (\n                            <FrontchannelLogout\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"delete-credential.ftl\":\n                        return (\n                            <DeleteCredential\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"delete-account-confirm.ftl\":\n                        return (\n                            <DeleteAccountConfirm\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"code.ftl\":\n                        return (\n                            <Code\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"error.ftl\":\n                        return (\n                            <Error\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"terms.ftl\":\n                        return (\n                            <Terms\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n                    case \"register.ftl\":\n                        return (\n                            <Register\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                                UserProfileFormFields={UserProfileFormFields} // Pass the required UserProfileFormFields prop\n                                doMakeUserConfirmPassword={true} // or false, depending on your requirement\n                            />\n                        );\n                    case \"login.ftl\":\n                        return (\n                            <Login\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classescustom}\n                                Template={CustomTemplate}\n                                doUseDefaultCss={true}\n                            />\n                        );\n\n                    default:\n                        return (\n                            <Base\n                                kcContext={kcContext}\n                                i18n={i18n}\n                                classes={classesDefault}\n                            />\n                        );\n                }\n            })()}\n        </Suspense>\n    );\n}\n\nconst classescustom = {\n    kcHtmlClass: \"bg-background\"\n} satisfies { [key in ClassKey]?: string };\n\nconst classesDefault = {} satisfies { [key in ClassKey]?: string };\n"],"names":["PasswordWrapper","props","kcClsx","i18n","passwordInputId","children","msgStr","isPasswordRevealed","toggleIsPasswordRevealed","useReducer","useEffect","passwordInputElement","document","getElementById","assert","HTMLInputElement","type","_jsxs","className","_jsx","Button","variant","onClick","EyeSlashIcon","EyeIcon","buttonVariants","cva","variants","default","destructive","outline","secondary","ghost","link","size","sm","lg","icon","defaultVariants","React","_ref","ref","asChild","Comp","Slot","cn","displayName","Input","_len","arguments","length","inputs","Array","_key","twMerge","clsx","useI18n","ofTypeI18n","createUseI18n","DropdownMenu","DropdownMenuPrimitive","DropdownMenuTrigger","inset","ChevronRight","_ref2","DropdownMenuContent","_ref3","sideOffset","DropdownMenuItem","_ref4","_ref5","checked","Check","_ref6","Circle","_ref7","_ref8","ModeToggle","isDarkMode","setIsDarkMode","useState","setTheme","mode","documentElement","classList","remove","add","window","matchMedia","matches","toggle","Sun","Moon","align","Card","CardContent","Template","displayInfo","displayMessage","displayRequiredFields","headerNode","socialProvidersNode","infoNode","documentTitle","bodyClassName","kcContext","doUseDefaultCss","classes","getKcClsx","msg","getChangeLocaleUrl","labelBySupportedLanguageTag","currentLanguageTag","realm","locale","auth","url","message","isAppInitiatedAction","authenticationSession","scripts","title","useSetClassName","qualifiedName","undefined","html","querySelector","lang","areAllStyleSheetsLoaded","useInsertLinkTags","componentOrHookName","hrefs","resourcesCommonPath","resourcesPath","insertScriptTags","useInsertScriptTags","scriptTags","src","textContent","authSessionId","tabId","ssoLoginInOtherTabsUrl","join","map","script","id","displayNameHtml","internationalizationEnabled","supported","tabIndex","GlobeAltIcon","role","i","languageTag","href","node","showUsername","showResetCredentials","attemptedUsername","loginRestartFlowUrl","dangerouslySetInnerHTML","__html","summary","showTryAnotherWayLink","action","loginAction","method","name","value","forms","submit","Info","advancedMsgStr","messageHeader","requiredActions","skipLink","pageRedirectUri","actionUri","client","requiredAction","baseUrl","labelVariants","Label","LabelPrimitive","checkboxVariants","CheckboxPrimitive","Separator","orientation","decorative","SeparatorPrimitive","SocialProviders","social","providers","password","_Fragment","p","alias","loginUrl","iconClasses","Login","_login$username","usernameHidden","login","registrationDisabled","messagesPerField","isLoginButtonDisabled","setIsLoginButtonDisabled","existsError","registrationAllowed","registrationUrl","onSubmit","htmlFor","loginWithEmailAllowed","registrationEmailAsUsername","defaultValue","username","autoFocus","autoComplete","getFirstError","rememberMe","defaultChecked","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","disabled","Register","UserProfileFormFields","doMakeUserConfirmPassword","recaptchaRequired","recaptchaSiteKey","termsAcceptanceRequired","isFormSubmittable","setIsFormSubmittable","areTermsAccepted","setAreTermsAccepted","exists","registrationAction","onIsFormSubmittableValueChange","TermsAcceptance","onAreTermsAcceptedValueChange","onChange","e","target","get","ScrollArea","ScrollAreaPrimitive","ScrollBar","Terms","Error","Code","code","success","error","DeleteAccountConfirm","triggered_from_aia","style","marginTop","marginBottom","DeleteCredential","credentialLabel","FrontchannelLogout","logout","logoutRedirectUri","location","replace","clients","frontChannelLogoutUrl","display","IdpReviewUserProfile","isFomSubmittable","setIsFomSubmittable","TextDisplay","LoginConfigTotp","totp","advancedMsg","supportedApplications","app","totpSecretEncoded","qrUrl","policy","getAlgorithmKey","digits","period","initialCounter","totpSecretQrCode","alt","manualUrl","totpSecret","otpCredentials","LogoutOtherSessions","LoginIdpLinkConfirm","idpAlias","LoginIdpLinkEmail","brokerContext","LoginOauthGrant","oauth","attributes","logoUri","clientId","clientScopesRequested","clientScope","consentScreenText","dynamicScopeParameter","policyUri","tosUri","oauthAction","LoginOtp","otpLogin","userOtpCredentials","otpCredential","index","Fragment","selectedCredentialId","userLabel","LoginPageExpired","LoginPassword","LoginResetOtp","configuredOtpCredentials","LoginResetPassword","_auth$attemptedUserna","duplicateEmailsAllowed","LoginUpdatePassword","LoginUpdateProfile","formNoValidate","LoginUsername","LoginVerifyEmail","_user$email","user","email","LoginX509Info","x509","formData","subjectDN","isUserEnabled","LogoutConfirm","logoutConfirm","logoutConfirmAction","SamlPostForm","samlPost","htmlFormElement","setHtmlFormElement","alert","SAMLRequest","SAMLResponse","relayState","SelectAuthenticator","debug","authenticationSelections","authenticationSelection","authExecId","iconCssClass","helpText","ChevronRightIcon","UpdateEmail","WebauthnAuthenticate","isUserIdentified","challenge","userVerification","rpId","createTimeout","authenticators","shouldDisplayAuthenticators","authenticator","credentialId","_authenticator$transp","transports","iconClass","label","displayNameProperties","displayNameProperty","arr","hasNext","createdAt","webAuthnAuthenticate","WebauthnError","WebauthnRegister","userid","signatureAlgorithms","rpEntityName","attestationConveyancePreference","authenticatorAttachment","requireResidentKey","userVerificationRequirement","excludeCredentialIds","isSetRetry","JSON","stringify","registerSecurityKey","LoginOauth2DeviceVerifyUserCode","oauth2DeviceVerificationAction","LoginRecoveryAuthnCodeConfig","recoveryAuthnCodesConfigBean","generatedRecoveryAuthnCodesList","slice","this","generatedRecoveryAuthnCodesAsString","generatedAt","LoginRecoveryAuthnCodeInput","recoveryAuthnCodesInputBean","codeNumber","lazy","Base","DefaultPage","CustomTemplate","KcPage","Suspense","pageId","classescustom","classesDefault","kcHtmlClass"],"sourceRoot":""}