{"version":3,"file":"static/js/761.2a4929b6.chunk.js","mappings":"8MAQc,SAAUA,EAAMC,G,MAC1B,MAAM,UAAEC,EAAS,KAAEC,EAAI,gBAAEC,EAAe,SAAEC,EAAQ,QAAEC,GAAYL,GAE1D,OAAEM,IAAWC,EAAAA,EAAAA,GAAU,CACzBJ,kBACAE,aAGE,OAAEG,EAAM,MAAEC,EAAK,IAAEC,EAAG,eAAEC,EAAc,MAAEC,EAAK,KAAEC,EAAI,qBAAEC,EAAoB,iBAAEC,GAAqBd,GAE9F,IAAEe,EAAG,OAAEC,GAAWf,GAEjBgB,EAAuBC,IAA4BC,EAAAA,EAAAA,WAAS,GAEnE,OACIC,EAAAA,EAAAA,KAACjB,EAAQkB,OAAAC,OAAA,CACLtB,UAAWA,EACXC,KAAMA,EACNC,gBAAiBA,EACjBE,QAASA,EACTmB,gBAAiBT,EAAiBU,YAAY,WAAY,YAC1DC,WAAYV,EAAI,qBAChBW,YAAalB,EAAMmB,UAAYnB,EAAMoB,sBAAwBf,EAC7DgB,UACIT,EAAAA,EAAAA,KAAA,MAAAC,OAAAC,OAAA,CAAKQ,GAAG,6BAA2B,CAAAC,UAC/BX,EAAAA,EAAAA,KAAA,MAAAC,OAAAC,OAAA,CAAKQ,GAAG,mBAAiB,CAAAC,UACrBC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACKhB,EAAI,aAAc,KACnBK,EAAAA,EAAAA,KAAA,IAAAC,OAAAC,OAAA,CAAGW,SAAU,EAAGC,KAAMzB,EAAI0B,iBAAe,CAAAJ,SACpChB,EAAI,0BAMzBqB,qBACIhB,EAAAA,EAAAA,KAAAiB,EAAAA,SAAA,CAAAN,SACKvB,EAAMmB,eAAiCW,IAArB/B,EAAOgC,WAAuD,IAA5BhC,EAAOgC,UAAUC,SAClER,EAAAA,EAAAA,MAAA,MAAAX,OAAAC,OAAA,CAAKQ,GAAG,sBAAsBW,UAAWpC,EAAO,oCAAkC,CAAA0B,SAAA,EAC9EX,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAW,SAAKhB,EAAI,oCACTK,EAAAA,EAAAA,KAAA,KAAAC,OAAAC,OAAA,CAAImB,UAAWpC,EAAO,+BAAgCE,EAAOgC,UAAUC,OAAS,GAAK,qCAAmC,CAAAT,SACnHxB,EAAOgC,UAAUG,KAAI,mBAAAC,EAAAC,UAAAJ,OAAAK,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,IAAKC,EAAE,CAAGT,GAAUM,EAAA,OACtCzB,EAAAA,EAAAA,KAAA,MAAAW,UACIC,EAAAA,EAAAA,MAAA,IAAAX,OAAAC,OAAA,CACIQ,GAAI,UAAUkB,EAAEC,QAChBR,UAAWpC,EACP,qCACAkC,EAAUC,OAAS,GAAK,+BAE5BU,KAAK,SACLhB,KAAMc,EAAEG,UAAQ,CAAApB,SAAA,CAEfiB,EAAEI,cAAehC,EAAAA,EAAAA,KAAA,KAAGqB,WAAWY,EAAAA,EAAAA,GAAKhD,EAAO,mBAAoB2C,EAAEI,aAAY,cAAc,UAC5FhC,EAAAA,EAAAA,KAAA,QACIqB,WAAWY,EAAAA,EAAAA,GAAKhD,EAAO,gCAAiC2C,EAAEI,aAAe,uBACzEE,wBAAyB,CAAEC,OAAQP,EAAEQ,oBAbxCR,EAAEC,MAgBN,cAKtB,CAAAlB,UAGPX,EAAAA,EAAAA,KAAA,MAAAC,OAAAC,OAAA,CAAKQ,GAAG,WAAS,CAAAC,UACbX,EAAAA,EAAAA,KAAA,MAAAC,OAAAC,OAAA,CAAKQ,GAAG,mBAAiB,CAAAC,SACpBvB,EAAMmB,WACHK,EAAAA,EAAAA,MAAA,OAAAX,OAAAC,OAAA,CACIQ,GAAG,gBACH2B,SAAUA,KACNvC,GAAyB,IAClB,GAEXwC,OAAQjD,EAAIkD,YACZC,OAAO,QAAM,CAAA7B,SAAA,EAEXrB,IACEsB,EAAAA,EAAAA,MAAA,MAAAX,OAAAC,OAAA,CAAKmB,UAAWpC,EAAO,qBAAmB,CAAA0B,SAAA,EACtCX,EAAAA,EAAAA,KAAA,QAAAC,OAAAC,OAAA,CAAOuC,QAAQ,WAAWpB,UAAWpC,EAAO,iBAAe,CAAA0B,SACrDvB,EAAMsD,sBAEDtD,EAAMuD,4BAELhD,EAAI,SADJA,EAAI,mBAFNA,EAAI,gBAKdK,EAAAA,EAAAA,KAAA,SACIa,SAAU,EACVH,GAAG,WACHW,UAAWpC,EAAO,gBAClB2D,KAAK,WACLC,aAA4B,QAAdC,EAAAvD,EAAMwD,gBAAQ,IAAAD,EAAAA,EAAI,GAChChB,KAAK,OACLkB,WAAS,EACTC,aAAa,WAAU,eACTvD,EAAiBU,YAAY,WAAY,cAE1DV,EAAiBU,YAAY,WAAY,cACtCJ,EAAAA,EAAAA,KAAA,QACIU,GAAG,cACHW,UAAWpC,EAAO,4BAA2B,YACnC,SACViD,wBAAyB,CACrBC,OAAQzC,EAAiBwD,cAAc,WAAY,oBAOvEtC,EAAAA,EAAAA,MAAA,MAAAX,OAAAC,OAAA,CAAKmB,UAAWpC,EAAO,qBAAmB,CAAA0B,SAAA,EACtCX,EAAAA,EAAAA,KAAA,QAAAC,OAAAC,OAAA,CAAOuC,QAAQ,WAAWpB,UAAWpC,EAAO,iBAAe,CAAA0B,SACtDhB,EAAI,gBAETK,EAAAA,EAAAA,KAACmD,EAAelD,OAAAC,OAAA,CAACjB,OAAQA,EAAQJ,KAAMA,EAAMuE,gBAAgB,YAAU,CAAAzC,UACnEX,EAAAA,EAAAA,KAAA,SACIa,SAAU,EACVH,GAAG,WACHW,UAAWpC,EAAO,gBAClB2D,KAAK,WACLd,KAAK,WACLmB,aAAa,mBAAkB,eACjBvD,EAAiBU,YAAY,WAAY,iBAG9Dd,GAAkBI,EAAiBU,YAAY,WAAY,cACxDJ,EAAAA,EAAAA,KAAA,QACIU,GAAG,cACHW,UAAWpC,EAAO,4BAA2B,YACnC,SACViD,wBAAyB,CACrBC,OAAQzC,EAAiBwD,cAAc,WAAY,oBAMnEtC,EAAAA,EAAAA,MAAA,MAAAX,OAAAC,OAAA,CAAKmB,UAAWpC,EAAO,mBAAoB,uBAAqB,CAAA0B,SAAA,EAC5DX,EAAAA,EAAAA,KAAA,MAAAC,OAAAC,OAAA,CAAKQ,GAAG,mBAAiB,CAAAC,SACpBvB,EAAMiE,aAAe/D,IAClBU,EAAAA,EAAAA,KAAA,MAAAC,OAAAC,OAAA,CAAKmB,UAAU,YAAU,CAAAV,UACrBC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACIX,EAAAA,EAAAA,KAAA,SACIa,SAAU,EACVH,GAAG,aACHkC,KAAK,aACLd,KAAK,WACLwB,iBAAkB/D,EAAM8D,aACzB,IACF1D,EAAI,wBAKrBK,EAAAA,EAAAA,KAAA,MAAAC,OAAAC,OAAA,CAAKmB,UAAWpC,EAAO,8BAA4B,CAAA0B,SAC9CvB,EAAMmE,uBACHvD,EAAAA,EAAAA,KAAA,QAAAW,UACIX,EAAAA,EAAAA,KAAA,IAAAC,OAAAC,OAAA,CAAGW,SAAU,EAAGC,KAAMzB,EAAImE,0BAAwB,CAAA7C,SAC7ChB,EAAI,iCAOzBiB,EAAAA,EAAAA,MAAA,MAAAX,OAAAC,OAAA,CAAKQ,GAAG,kBAAkBW,UAAWpC,EAAO,qBAAmB,CAAA0B,SAAA,EAC3DX,EAAAA,EAAAA,KAAA,SAAO8B,KAAK,SAASpB,GAAG,kBAAkBkC,KAAK,eAAea,MAAOjE,EAAKkE,sBAC1E1D,EAAAA,EAAAA,KAAA,SACIa,SAAU,EACV8C,SAAU9D,EACVwB,UAAWpC,EAAO,gBAAiB,uBAAwB,qBAAsB,sBACjF2D,KAAK,QACLlC,GAAG,WACHoB,KAAK,SACL2B,MAAO7D,EAAO,6BASlD,CAEA,SAASuD,EAAgBxE,GACrB,MAAM,OAAEM,EAAM,KAAEJ,EAAI,gBAAEuE,EAAe,SAAEzC,GAAahC,GAE9C,OAAEiB,GAAWf,GAEZ+E,EAAoBC,IAA4BC,EAAAA,EAAAA,aAAYF,IAAiCA,IAAoB,GAUxH,OARAG,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAuBC,SAASC,eAAed,IAErDe,EAAAA,EAAAA,GAAOH,aAAgCI,kBAEvCJ,EAAqBlC,KAAO8B,EAAqB,OAAS,UAAU,GACrE,CAACA,KAGAhD,EAAAA,EAAAA,MAAA,MAAAX,OAAAC,OAAA,CAAKmB,UAAWpC,EAAO,iBAAe,CAAA0B,SAAA,CACjCA,GACDX,EAAAA,EAAAA,KAAA,SAAAC,OAAAC,OAAA,CACI4B,KAAK,SACLT,UAAWpC,EAAO,uCAAsC,aAC5CW,EAAOgE,EAAqB,eAAiB,gBAAe,gBACzDR,EACfiB,QAASR,GAAwB,CAAAlD,UAEjCX,EAAAA,EAAAA,KAAA,KAAGqB,UAAWpC,EAAO2E,EAAqB,mCAAqC,oCAAmC,yBAIlI,C","sources":["../node_modules/keycloakify/src/login/pages/Login.tsx"],"sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            displayMessage={!messagesPerField.existsError(\"username\", \"password\")}\n            headerNode={msg(\"loginAccountTitle\")}\n            displayInfo={realm.password && realm.registrationAllowed && !registrationDisabled}\n            infoNode={\n                <div id=\"kc-registration-container\">\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}{\" \"}\n                            <a tabIndex={8} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                </div>\n            }\n            socialProvidersNode={\n                <>\n                    {realm.password && social.providers !== undefined && social.providers.length !== 0 && (\n                        <div id=\"kc-social-providers\" className={kcClsx(\"kcFormSocialAccountSectionClass\")}>\n                            <hr />\n                            <h2>{msg(\"identity-provider-login-label\")}</h2>\n                            <ul className={kcClsx(\"kcFormSocialAccountListClass\", social.providers.length > 3 && \"kcFormSocialAccountListGridClass\")}>\n                                {social.providers.map((...[p, , providers]) => (\n                                    <li key={p.alias}>\n                                        <a\n                                            id={`social-${p.alias}`}\n                                            className={kcClsx(\n                                                \"kcFormSocialAccountListButtonClass\",\n                                                providers.length > 3 && \"kcFormSocialAccountGridItem\"\n                                            )}\n                                            type=\"button\"\n                                            href={p.loginUrl}\n                                        >\n                                            {p.iconClasses && <i className={clsx(kcClsx(\"kcCommonLogoIdP\"), p.iconClasses)} aria-hidden=\"true\"></i>}\n                                            <span\n                                                className={clsx(kcClsx(\"kcFormSocialAccountNameClass\"), p.iconClasses && \"kc-social-icon-text\")}\n                                                dangerouslySetInnerHTML={{ __html: p.displayName }}\n                                            ></span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </>\n            }\n        >\n            <div id=\"kc-form\">\n                <div id=\"kc-form-wrapper\">\n                    {realm.password && (\n                        <form\n                            id=\"kc-form-login\"\n                            onSubmit={() => {\n                                setIsLoginButtonDisabled(true);\n                                return true;\n                            }}\n                            action={url.loginAction}\n                            method=\"post\"\n                        >\n                            {!usernameHidden && (\n                                <div className={kcClsx(\"kcFormGroupClass\")}>\n                                    <label htmlFor=\"username\" className={kcClsx(\"kcLabelClass\")}>\n                                        {!realm.loginWithEmailAllowed\n                                            ? msg(\"username\")\n                                            : !realm.registrationEmailAsUsername\n                                              ? msg(\"usernameOrEmail\")\n                                              : msg(\"email\")}\n                                    </label>\n                                    <input\n                                        tabIndex={2}\n                                        id=\"username\"\n                                        className={kcClsx(\"kcInputClass\")}\n                                        name=\"username\"\n                                        defaultValue={login.username ?? \"\"}\n                                        type=\"text\"\n                                        autoFocus\n                                        autoComplete=\"username\"\n                                        aria-invalid={messagesPerField.existsError(\"username\", \"password\")}\n                                    />\n                                    {messagesPerField.existsError(\"username\", \"password\") && (\n                                        <span\n                                            id=\"input-error\"\n                                            className={kcClsx(\"kcInputErrorMessageClass\")}\n                                            aria-live=\"polite\"\n                                            dangerouslySetInnerHTML={{\n                                                __html: messagesPerField.getFirstError(\"username\", \"password\")\n                                            }}\n                                        />\n                                    )}\n                                </div>\n                            )}\n\n                            <div className={kcClsx(\"kcFormGroupClass\")}>\n                                <label htmlFor=\"password\" className={kcClsx(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                                <PasswordWrapper kcClsx={kcClsx} i18n={i18n} passwordInputId=\"password\">\n                                    <input\n                                        tabIndex={3}\n                                        id=\"password\"\n                                        className={kcClsx(\"kcInputClass\")}\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"current-password\"\n                                        aria-invalid={messagesPerField.existsError(\"username\", \"password\")}\n                                    />\n                                </PasswordWrapper>\n                                {usernameHidden && messagesPerField.existsError(\"username\", \"password\") && (\n                                    <span\n                                        id=\"input-error\"\n                                        className={kcClsx(\"kcInputErrorMessageClass\")}\n                                        aria-live=\"polite\"\n                                        dangerouslySetInnerHTML={{\n                                            __html: messagesPerField.getFirstError(\"username\", \"password\")\n                                        }}\n                                    />\n                                )}\n                            </div>\n\n                            <div className={kcClsx(\"kcFormGroupClass\", \"kcFormSettingClass\")}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={5}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    defaultChecked={!!login.rememberMe}\n                                                />{\" \"}\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={6} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormGroupClass\")}>\n                                <input type=\"hidden\" id=\"id-hidden-input\" name=\"credentialId\" value={auth.selectedCredential} />\n                                <input\n                                    tabIndex={7}\n                                    disabled={isLoginButtonDisabled}\n                                    className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </Template>\n    );\n}\n\nfunction PasswordWrapper(props: { kcClsx: KcClsx; i18n: I18n; passwordInputId: string; children: JSX.Element }) {\n    const { kcClsx, i18n, passwordInputId, children } = props;\n\n    const { msgStr } = i18n;\n\n    const [isPasswordRevealed, toggleIsPasswordRevealed] = useReducer((isPasswordRevealed: boolean) => !isPasswordRevealed, false);\n\n    useEffect(() => {\n        const passwordInputElement = document.getElementById(passwordInputId);\n\n        assert(passwordInputElement instanceof HTMLInputElement);\n\n        passwordInputElement.type = isPasswordRevealed ? \"text\" : \"password\";\n    }, [isPasswordRevealed]);\n\n    return (\n        <div className={kcClsx(\"kcInputGroup\")}>\n            {children}\n            <button\n                type=\"button\"\n                className={kcClsx(\"kcFormPasswordVisibilityButtonClass\")}\n                aria-label={msgStr(isPasswordRevealed ? \"hidePassword\" : \"showPassword\")}\n                aria-controls={passwordInputId}\n                onClick={toggleIsPasswordRevealed}\n            >\n                <i className={kcClsx(isPasswordRevealed ? \"kcFormPasswordVisibilityIconHide\" : \"kcFormPasswordVisibilityIconShow\")} aria-hidden />\n            </button>\n        </div>\n    );\n}\n"],"names":["Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","kcClsx","getKcClsx","social","realm","url","usernameHidden","login","auth","registrationDisabled","messagesPerField","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","_jsx","Object","assign","displayMessage","existsError","headerNode","displayInfo","password","registrationAllowed","infoNode","id","children","_jsxs","tabIndex","href","registrationUrl","socialProvidersNode","_Fragment","undefined","providers","length","className","map","_len","arguments","_ref","Array","_key","p","alias","type","loginUrl","iconClasses","clsx","dangerouslySetInnerHTML","__html","displayName","onSubmit","action","loginAction","method","htmlFor","loginWithEmailAllowed","registrationEmailAsUsername","name","defaultValue","_a","username","autoFocus","autoComplete","getFirstError","PasswordWrapper","passwordInputId","rememberMe","defaultChecked","resetPasswordAllowed","loginResetCredentialsUrl","value","selectedCredential","disabled","isPasswordRevealed","toggleIsPasswordRevealed","useReducer","useEffect","passwordInputElement","document","getElementById","assert","HTMLInputElement","onClick"],"sourceRoot":""}