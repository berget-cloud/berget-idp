{"version":3,"file":"static/js/7840.c2133608.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/LoginPassword.tsx"],"sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { getKcClsx, type KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function LoginPassword(props: PageProps<Extract<KcContext, { pageId: \"login-password.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { realm, url, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"doLogIn\")}\n            displayMessage={!messagesPerField.existsError(\"password\")}\n        >\n            <div id=\"kc-form\">\n                <div id=\"kc-form-wrapper\">\n                    <form\n                        id=\"kc-form-login\"\n                        onSubmit={() => {\n                            setIsLoginButtonDisabled(true);\n                            return true;\n                        }}\n                        action={url.loginAction}\n                        method=\"post\"\n                    >\n                        <div className={clsx(kcClsx(\"kcFormGroupClass\"), \"no-bottom-margin\")}>\n                            <hr />\n                            <label htmlFor=\"password\" className={kcClsx(\"kcLabelClass\")}>\n                                {msg(\"password\")}\n                            </label>\n\n                            <PasswordWrapper kcClsx={kcClsx} i18n={i18n} passwordInputId=\"password\">\n                                <input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={kcClsx(\"kcInputClass\")}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoFocus\n                                    autoComplete=\"on\"\n                                    aria-invalid={messagesPerField.existsError(\"username\", \"password\")}\n                                />\n                            </PasswordWrapper>\n\n                            {messagesPerField.existsError(\"password\") && (\n                                <span\n                                    id=\"input-error-password\"\n                                    className={kcClsx(\"kcInputErrorMessageClass\")}\n                                    aria-live=\"polite\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: messagesPerField.get(\"password\")\n                                    }}\n                                />\n                            )}\n                        </div>\n                        <div className={kcClsx(\"kcFormGroupClass\", \"kcFormSettingClass\")}>\n                            <div id=\"kc-form-options\" />\n                            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                                {realm.resetPasswordAllowed && (\n                                    <span>\n                                        <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                            {msg(\"doForgotPassword\")}\n                                        </a>\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n                        <div id=\"kc-form-buttons\" className={kcClsx(\"kcFormGroupClass\")}>\n                            <input\n                                tabIndex={4}\n                                className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonBlockClass\", \"kcButtonLargeClass\")}\n                                name=\"login\"\n                                id=\"kc-login\"\n                                type=\"submit\"\n                                value={msgStr(\"doLogIn\")}\n                                disabled={isLoginButtonDisabled}\n                            />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </Template>\n    );\n}\n\nfunction PasswordWrapper(props: { kcClsx: KcClsx; i18n: I18n; passwordInputId: string; children: JSX.Element }) {\n    const { kcClsx, i18n, passwordInputId, children } = props;\n\n    const { msgStr } = i18n;\n\n    const [isPasswordRevealed, toggleIsPasswordRevealed] = useReducer((isPasswordRevealed: boolean) => !isPasswordRevealed, false);\n\n    useEffect(() => {\n        const passwordInputElement = document.getElementById(passwordInputId);\n\n        assert(passwordInputElement instanceof HTMLInputElement);\n\n        passwordInputElement.type = isPasswordRevealed ? \"text\" : \"password\";\n    }, [isPasswordRevealed]);\n\n    return (\n        <div className={kcClsx(\"kcInputGroup\")}>\n            {children}\n            <button\n                type=\"button\"\n                className={kcClsx(\"kcFormPasswordVisibilityButtonClass\")}\n                aria-label={msgStr(isPasswordRevealed ? \"hidePassword\" : \"showPassword\")}\n                aria-controls={passwordInputId}\n                onClick={toggleIsPasswordRevealed}\n            >\n                <i className={kcClsx(isPasswordRevealed ? \"kcFormPasswordVisibilityIconHide\" : \"kcFormPasswordVisibilityIconShow\")} aria-hidden />\n            </button>\n        </div>\n    );\n}\n"],"names":["LoginPassword","props","kcContext","i18n","doUseDefaultCss","Template","classes","kcClsx","getKcClsx","realm","url","messagesPerField","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","_jsx","Object","assign","headerNode","displayMessage","existsError","children","id","_jsxs","onSubmit","action","loginAction","method","className","clsx","htmlFor","PasswordWrapper","passwordInputId","tabIndex","name","type","autoFocus","autoComplete","dangerouslySetInnerHTML","__html","get","resetPasswordAllowed","href","loginResetCredentialsUrl","value","disabled","isPasswordRevealed","toggleIsPasswordRevealed","useReducer","useEffect","passwordInputElement","document","getElementById","assert","HTMLInputElement","onClick"],"sourceRoot":""}