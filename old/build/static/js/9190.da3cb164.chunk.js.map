{"version":3,"file":"static/js/9190.da3cb164.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/LoginConfigTotp.tsx"],"sourcesContent":["import { getKcClsx, KcClsx } from \"keycloakify/login/lib/kcClsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport type { KcContext } from \"../KcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function LoginConfigTotp(props: PageProps<Extract<KcContext, { pageId: \"login-config-totp.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { kcClsx } = getKcClsx({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, isAppInitiatedAction, totp, mode, messagesPerField } = kcContext;\n\n    const { msg, msgStr, advancedMsg } = i18n;\n\n    return (\n        <Template\n            kcContext={kcContext}\n            i18n={i18n}\n            doUseDefaultCss={doUseDefaultCss}\n            classes={classes}\n            headerNode={msg(\"loginTotpTitle\")}\n            displayMessage={!messagesPerField.existsError(\"totp\", \"userLabel\")}\n        >\n            <>\n                <ol id=\"kc-totp-settings\">\n                    <li>\n                        <p>{msg(\"loginTotpStep1\")}</p>\n\n                        <ul id=\"kc-totp-supported-apps\">\n                            {totp.supportedApplications.map(app => (\n                                <li key={app}>{advancedMsg(app)}</li>\n                            ))}\n                        </ul>\n                    </li>\n\n                    {mode == \"manual\" ? (\n                        <>\n                            <li>\n                                <p>{msg(\"loginTotpManualStep2\")}</p>\n                                <p>\n                                    <span id=\"kc-totp-secret-key\">{totp.totpSecretEncoded}</span>\n                                </p>\n                                <p>\n                                    <a href={totp.qrUrl} id=\"mode-barcode\">\n                                        {msg(\"loginTotpScanBarcode\")}\n                                    </a>\n                                </p>\n                            </li>\n                            <li>\n                                <p>{msg(\"loginTotpManualStep3\")}</p>\n                                <p>\n                                    <ul>\n                                        <li id=\"kc-totp-type\">\n                                            {msg(\"loginTotpType\")}: {msg(`loginTotp.${totp.policy.type}`)}\n                                        </li>\n                                        <li id=\"kc-totp-algorithm\">\n                                            {msg(\"loginTotpAlgorithm\")}: {totp.policy.getAlgorithmKey()}\n                                        </li>\n                                        <li id=\"kc-totp-digits\">\n                                            {msg(\"loginTotpDigits\")}: {totp.policy.digits}\n                                        </li>\n                                        {totp.policy.type === \"totp\" ? (\n                                            <li id=\"kc-totp-period\">\n                                                {msg(\"loginTotpInterval\")}: {totp.policy.period}\n                                            </li>\n                                        ) : (\n                                            <li id=\"kc-totp-counter\">\n                                                {msg(\"loginTotpCounter\")}: {totp.policy.initialCounter}\n                                            </li>\n                                        )}\n                                    </ul>\n                                </p>\n                            </li>\n                        </>\n                    ) : (\n                        <li>\n                            <p>{msg(\"loginTotpStep2\")}</p>\n                            <img id=\"kc-totp-secret-qr-code\" src={`data:image/png;base64, ${totp.totpSecretQrCode}`} alt=\"Figure: Barcode\" />\n                            <br />\n                            <p>\n                                <a href={totp.manualUrl} id=\"mode-manual\">\n                                    {msg(\"loginTotpUnableToScan\")}\n                                </a>\n                            </p>\n                        </li>\n                    )}\n                    <li>\n                        <p>{msg(\"loginTotpStep3\")}</p>\n                        <p>{msg(\"loginTotpStep3DeviceName\")}</p>\n                    </li>\n                </ol>\n\n                <form action={url.loginAction} className={kcClsx(\"kcFormClass\")} id=\"kc-totp-settings-form\" method=\"post\">\n                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                        <div className={kcClsx(\"kcInputWrapperClass\")}>\n                            <label htmlFor=\"totp\" className={kcClsx(\"kcLabelClass\")}>\n                                {msg(\"authenticatorCode\")}\n                            </label>{\" \"}\n                            <span className=\"required\">*</span>\n                        </div>\n                        <div className={kcClsx(\"kcInputWrapperClass\")}>\n                            <input\n                                type=\"text\"\n                                id=\"totp\"\n                                name=\"totp\"\n                                autoComplete=\"off\"\n                                className={kcClsx(\"kcInputClass\")}\n                                aria-invalid={messagesPerField.existsError(\"totp\")}\n                            />\n\n                            {messagesPerField.existsError(\"totp\") && (\n                                <span\n                                    id=\"input-error-otp-code\"\n                                    className={kcClsx(\"kcInputErrorMessageClass\")}\n                                    aria-live=\"polite\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: messagesPerField.get(\"totp\")\n                                    }}\n                                />\n                            )}\n                        </div>\n                        <input type=\"hidden\" id=\"totpSecret\" name=\"totpSecret\" value={totp.totpSecret} />\n                        {mode && <input type=\"hidden\" id=\"mode\" value={mode} />}\n                    </div>\n\n                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                        <div className={kcClsx(\"kcInputWrapperClass\")}>\n                            <label htmlFor=\"userLabel\" className={kcClsx(\"kcLabelClass\")}>\n                                {msg(\"loginTotpDeviceName\")}\n                            </label>{\" \"}\n                            {totp.otpCredentials.length >= 1 && <span className=\"required\">*</span>}\n                        </div>\n                        <div className={kcClsx(\"kcInputWrapperClass\")}>\n                            <input\n                                type=\"text\"\n                                id=\"userLabel\"\n                                name=\"userLabel\"\n                                autoComplete=\"off\"\n                                className={kcClsx(\"kcInputClass\")}\n                                aria-invalid={messagesPerField.existsError(\"userLabel\")}\n                            />\n                            {messagesPerField.existsError(\"userLabel\") && (\n                                <span\n                                    id=\"input-error-otp-label\"\n                                    className={kcClsx(\"kcInputErrorMessageClass\")}\n                                    aria-live=\"polite\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: messagesPerField.get(\"userLabel\")\n                                    }}\n                                />\n                            )}\n                        </div>\n                    </div>\n\n                    <div className={kcClsx(\"kcFormGroupClass\")}>\n                        <LogoutOtherSessions kcClsx={kcClsx} i18n={i18n} />\n                    </div>\n\n                    {isAppInitiatedAction ? (\n                        <>\n                            <input\n                                type=\"submit\"\n                                className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonLargeClass\")}\n                                id=\"saveTOTPBtn\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                            <button\n                                type=\"submit\"\n                                className={kcClsx(\"kcButtonClass\", \"kcButtonDefaultClass\", \"kcButtonLargeClass\", \"kcButtonLargeClass\")}\n                                id=\"cancelTOTPBtn\"\n                                name=\"cancel-aia\"\n                                value=\"true\"\n                            >\n                                {msg(\"doCancel\")}\n                            </button>\n                        </>\n                    ) : (\n                        <input\n                            type=\"submit\"\n                            className={kcClsx(\"kcButtonClass\", \"kcButtonPrimaryClass\", \"kcButtonLargeClass\")}\n                            id=\"saveTOTPBtn\"\n                            value={msgStr(\"doSubmit\")}\n                        />\n                    )}\n                </form>\n            </>\n        </Template>\n    );\n}\n\nfunction LogoutOtherSessions(props: { kcClsx: KcClsx; i18n: I18n }) {\n    const { kcClsx, i18n } = props;\n\n    const { msg } = i18n;\n\n    return (\n        <div id=\"kc-form-options\" className={kcClsx(\"kcFormOptionsClass\")}>\n            <div className={kcClsx(\"kcFormOptionsWrapperClass\")}>\n                <div className=\"checkbox\">\n                    <label>\n                        <input type=\"checkbox\" id=\"logout-sessions\" name=\"logout-sessions\" value=\"on\" defaultChecked={true} />\n                        {msg(\"logoutOtherSessions\")}\n                    </label>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":["LoginConfigTotp","props","kcContext","i18n","doUseDefaultCss","Template","classes","kcClsx","getKcClsx","url","isAppInitiatedAction","totp","mode","messagesPerField","msg","msgStr","advancedMsg","_jsx","Object","assign","headerNode","displayMessage","existsError","children","_jsxs","_Fragment","id","supportedApplications","map","app","totpSecretEncoded","href","qrUrl","policy","type","getAlgorithmKey","digits","period","initialCounter","src","totpSecretQrCode","alt","manualUrl","action","loginAction","className","method","htmlFor","name","autoComplete","dangerouslySetInnerHTML","__html","get","value","totpSecret","otpCredentials","length","LogoutOtherSessions","defaultChecked"],"sourceRoot":""}